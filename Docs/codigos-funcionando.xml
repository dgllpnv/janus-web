This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.gitignore
pom.xml
src/main/java/br/janus/pje/LoginPjeTreBa.java
src/main/java/br/janus/pje/Main.java
src/main/java/br/janus/pje/SessionCookieJar.java
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".gitignore">
target/
!.mvn/wrapper/maven-wrapper.jar
!**/src/main/**/target/
!**/src/test/**/target/

### IntelliJ IDEA ###
.idea/modules.xml
.idea/jarRepositories.xml
.idea/compiler.xml
.idea/libraries/
*.iws
*.iml
*.ipr

### Eclipse ###
.apt_generated
.classpath
.factorypath
.project
.settings
.springBeans
.sts4-cache

### NetBeans ###
/nbproject/private/
/nbbuild/
/dist/
/nbdist/
/.nb-gradle/
build/
!**/src/main/**/build/
!**/src/test/**/build/

### VS Code ###
.vscode/

### Mac OS ###
.DS_Store
</file>

<file path="pom.xml">
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>br.janus.pje</groupId>
    <artifactId>janus-http-teste</artifactId>
    <version>1.0-SNAPSHOT</version>

    <properties>
        <maven.compiler.source>17</maven.compiler.source>
        <maven.compiler.target>17</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>

    <dependencies>
        <dependency>
            <groupId>com.squareup.okhttp3</groupId>
            <artifactId>okhttp</artifactId>
            <version>4.12.0</version>
        </dependency>
        <dependency>
            <groupId>org.jsoup</groupId>
            <artifactId>jsoup</artifactId>
            <version>1.17.2</version>
        </dependency>
    </dependencies>
</project>
</file>

<file path="src/main/java/br/janus/pje/LoginPjeTreBa.java">
package br.janus.pje;

import okhttp3.*;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;

import java.io.IOException;
import java.util.Scanner;

public class LoginPjeTreBa {
    public static void main(String[] args) throws IOException {
        // 1) Captura OTP por linha de comando, se houver
        String otpCode = (args.length > 0 ? args[0] : null);

        OkHttpClient client = new OkHttpClient.Builder()
                .cookieJar(new SessionCookieJar())
                .followRedirects(false)
                .build();

        // 2) GET da página de login JSF
        Request getLogin = new Request.Builder()
                .url("https://pje1g-ba.tse.jus.br/pje/login.seam?loginComCertificado=false")
                .get()
                .build();
        Response resp1 = client.newCall(getLogin).execute();
        String html1 = resp1.body().string();

        // 3) Extrai javax.faces.ViewState
        Document d1 = Jsoup.parse(html1);
        String viewState = d1.select("input[name=javax.faces.ViewState]").val();
        System.out.println("[INFO] ViewState = " + viewState);

        // 4) POST credenciais (usuário+senha)
        RequestBody form1 = new FormBody.Builder()
                .add("loginAplicacao", "PJE")
                .add("f:formulario:login", "SEU_CPF_AQUI")
                .add("f:formulario:senha", "SUA_SENHA_AQUI")
                .add("javax.faces.ViewState", viewState)
                .build();
        Request postCred = new Request.Builder()
                .url("https://pje1g-ba.tse.jus.br/pje/login.seam")
                .post(form1)
                .header("Faces-Request", "partial/ajax")
                .header("X-Requested-With", "XMLHttpRequest")
                .build();
        Response resp2 = client.newCall(postCred).execute();
        String xml2 = resp2.body().string();
        System.out.println("[DEBUG] Resposta JSF: " + xml2);

        // 5) Detecta redirecionamento pra Keycloak (OpenID)
        if (!xml2.contains("<redirect")) {
            System.err.println("[ERROR] Não houve etapa JSF – verifique login/senha.");
            return;
        }
        String kcUrl = Jsoup.parse(xml2).selectFirst("redirect").attr("url");
        System.out.println("[INFO] Ir para Keycloak: " + kcUrl);

        // 6) GET do formulário Keycloak
        Response resp3 = client.newCall(new Request.Builder().url(kcUrl).get().build()).execute();
        String html3 = resp3.body().string();
        Document d3 = Jsoup.parse(html3);
        Element form = d3.selectFirst("form#kc-form-login");
        String action = form.attr("abs:action");
        String execution = form.select("input[name=execution]").val();

        // 7) POST usuário+senha no Keycloak (já enviamos, agora OTP)
        //    Aqui o Keycloak já autentica seu usuário e envia página de OTP.
        //    Precisamos enviar o código recebido por e-mail:

        // Se não veio por parâmetro, pede no console
        if (otpCode == null) {
            System.out.print("Digite o código OTP (e-mail): ");
            otpCode = new Scanner(System.in).nextLine().trim();
        }

        RequestBody formOtp = new FormBody.Builder()
                .add("username", "")    // já está no cookie, normalmente não precisa reenviar
                .add("password", "")    // idem
                .add("credentialId", "")
                .add("otp", otpCode)    // nome do campo pode variar, ajuste conforme seu form
                .add("execution", execution)
                .add("client_id", "pje-treba-1g")
                .build();

        Response resp4 = client.newCall(new Request.Builder()
                .url(action)
                .post(formOtp)
                .build()).execute();

        // 8) Após OTP correto, deve vir redirecionamento (HTTP 302)
        if (resp4.code() == 302) {
            String painelUrl = resp4.header("Location");
            Response painel = client.newCall(new Request.Builder().url(painelUrl).get().build()).execute();
            if (painel.body().string().contains("painel-usuario-interno")) {
                System.out.println("[SUCCESS] Sessão autenticada com sucesso!");
            } else {
                System.err.println("[ERROR] Não encontrei o painel após OTP.");
            }
        } else {
            System.err.println("[ERROR] OTP inválido ou expirado (HTTP " + resp4.code() + ")");
        }
    }
}
</file>

<file path="src/main/java/br/janus/pje/Main.java">
package br.janus.pje;

public class Main {
    public static void main(String[] args) {
        System.out.println("Hello, World!");
    }
}
</file>

<file path="src/main/java/br/janus/pje/SessionCookieJar.java">
package br.janus.pje;

import okhttp3.Cookie;
import okhttp3.CookieJar;
import okhttp3.HttpUrl;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SessionCookieJar implements CookieJar {
    private final Map<String, List<Cookie>> storage = new HashMap<>();

    @Override
    public void saveFromResponse(HttpUrl url, List<Cookie> cookies) {
        storage.put(url.host(), cookies);
    }

    @Override
    public List<Cookie> loadForRequest(HttpUrl url) {
        return storage.getOrDefault(url.host(), new ArrayList<>());
    }
}
</file>

</files>
