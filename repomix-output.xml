This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.gitignore
.npmrc
angular.json
Dockerfile
nginx.conf
package.json
proxy.config.json
README.md
src/app/app.component.html
src/app/app.component.spec.ts
src/app/app.component.ts
src/app/app.module.ts
src/app/components/base-component-list.ts
src/app/components/base-component.ts
src/app/components/busca-local-votacao/busca-local-votacao.component.css
src/app/components/busca-local-votacao/busca-local-votacao.component.html
src/app/components/busca-local-votacao/busca-local-votacao.component.spec.ts
src/app/components/busca-local-votacao/busca-local-votacao.component.ts
src/app/components/confirmation-dialog/confirmation-dialog.component.css
src/app/components/confirmation-dialog/confirmation-dialog.component.html
src/app/components/confirmation-dialog/confirmation-dialog.component.ts
src/app/components/dashboard-automacoes/dashboard-automacoes.component.css
src/app/components/dashboard-automacoes/dashboard-automacoes.component.html
src/app/components/dashboard-automacoes/dashboard-automacoes.component.spec.ts
src/app/components/dashboard-automacoes/dashboard-automacoes.component.ts
src/app/components/footer/footer.component.css
src/app/components/footer/footer.component.html
src/app/components/footer/footer.component.ts
src/app/components/header/header.component.css
src/app/components/header/header.component.html
src/app/components/header/header.component.ts
src/app/components/home/home.component.css
src/app/components/home/home.component.html
src/app/components/home/home.component.ts
src/app/components/insert_locais.sql
src/app/components/login/login.component.css
src/app/components/login/login.component.html
src/app/components/login/login.component.ts
src/app/components/modal-iniciar-automacao/modal-iniciar-automacao.component.css
src/app/components/modal-iniciar-automacao/modal-iniciar-automacao.component.html
src/app/components/modal-iniciar-automacao/modal-iniciar-automacao.component.spec.ts
src/app/components/modal-iniciar-automacao/modal-iniciar-automacao.component.ts
src/app/components/page-not-found/page-not-found.component.css
src/app/components/page-not-found/page-not-found.component.html
src/app/components/page-not-found/page-not-found.component.ts
src/app/components/painel-servidor/painel-servidor.component.css
src/app/components/painel-servidor/painel-servidor.component.html
src/app/components/painel-servidor/painel-servidor.component.spec.ts
src/app/components/painel-servidor/painel-servidor.component.ts
src/app/components/send-pdf/send-pdf.component.css
src/app/components/send-pdf/send-pdf.component.html
src/app/components/send-pdf/send-pdf.component.spec.ts
src/app/components/send-pdf/send-pdf.component.ts
src/app/components/toast/toast.component.css
src/app/components/toast/toast.component.html
src/app/components/toast/toast.component.ts
src/app/components/toaster/toaster.component.css
src/app/components/toaster/toaster.component.html
src/app/components/toaster/toaster.component.ts
src/app/constants/app-constants.ts
src/app/directives/back-button.directive.ts
src/app/enums/event-types.ts
src/app/helpers/app-utils.ts
src/app/helpers/auth.interceptor.ts
src/app/helpers/pipes/sim-nao.pipe.ts
src/app/helpers/token-storage.service.ts
src/app/model/campos-pesquisa.ts
src/app/model/cracha.ts
src/app/model/pagination/content.ts
src/app/model/pagination/page-root.ts
src/app/model/pagination/pageable-sort.ts
src/app/model/pagination/pageable.ts
src/app/model/pagination/root-sort.ts
src/app/model/pagination/sort.ts
src/app/model/toast-event.ts
src/app/model/usuario.ts
src/app/service/base-service.ts
src/app/service/confirmation-dialog-service.ts
src/app/service/dropdown.service.spec.ts
src/app/service/dropdown.service.ts
src/app/service/local-votacao.service.ts
src/app/service/login-service.ts
src/app/service/LogService.java
src/app/service/mostra-imagem.service.spec.ts
src/app/service/mostra-imagem.service.ts
src/app/service/servidor.service.ts
src/app/service/toast-service.ts
src/assets/json/campos-pesquisa.json
src/environments/environment.development.ts
src/environments/environment.ts
src/index.html
src/main.ts
src/styles.css
tsconfig.app.json
tsconfig.json
tsconfig.spec.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".gitignore">
# See http://help.github.com/ignore-files/ for more about ignoring files.

# Compiled output
/dist
/tmp
/out-tsc
/bazel-out

# Node
/node_modules
npm-debug.log
yarn-error.log

# IDEs and editors
.idea/
.project
.classpath
.c9/
*.launch
.settings/
*.sublime-workspace

# Visual Studio Code
.vscode/*
!.vscode/settings.json
!.vscode/tasks.json
!.vscode/launch.json
!.vscode/extensions.json
.history/*

# Miscellaneous
/.angular/cache
.sass-cache/
/connect.lock
/coverage
/libpeerconnection.log
testem.log
/typings

# System files
.DS_Store
Thumbs.db
</file>

<file path=".npmrc">
registry=https://registry.npmjs.org/
</file>

<file path="angular.json">
{
  "$schema": "./node_modules/@angular/cli/lib/config/schema.json",
  "version": 1,
  "newProjectRoot": "projects",
  "projects": {
    "aplicacao-front": {
      "projectType": "application",
      "schematics": {},
      "root": "",
      "sourceRoot": "src",
      "prefix": "app",
      "architect": {
        "build": {
          "builder": "@angular-devkit/build-angular:browser",
          "options": {
            "outputPath": "dist/aplicacao-front",
            "index": "src/index.html",
            "main": "src/main.ts",
            "polyfills": [
              "zone.js"
            ],
            "tsConfig": "tsconfig.app.json",
            "assets": [
              "src/favicon.ico",
              "src/assets"
            ],
            "styles": [
              "node_modules/bootstrap/dist/css/bootstrap.min.css",
              "node_modules/bootstrap/scss/bootstrap.scss",
              "node_modules/bootstrap-icons/font/bootstrap-icons.css",
              "src/styles.css"
            ],
            "scripts": [
              "node_modules/bootstrap/dist/js/bootstrap.bundle.min.js"
            ]
          },
          "configurations": {
            "production": {
              "budgets": [
                {
                  "type": "initial",
                  "maximumWarning": "500kb",
                  "maximumError": "1mb"
                },
                {
                  "type": "anyComponentStyle",
                  "maximumWarning": "2kb",
                  "maximumError": "4kb"
                }
              ],
              "outputHashing": "all"
            },
            "development": {
              "buildOptimizer": false,
              "optimization": false,
              "vendorChunk": true,
              "extractLicenses": false,
              "sourceMap": true,
              "namedChunks": true,
              "fileReplacements": [
                {
                  "replace": "src/environments/environment.ts",
                  "with": "src/environments/environment.development.ts"
                }
              ]
            }
          },
          "defaultConfiguration": "production"
        },
        "serve": {
          "builder": "@angular-devkit/build-angular:dev-server",
          "configurations": {
            "production": {
              "browserTarget": "aplicacao-front:build:production"
            },
            "development": {
              "browserTarget": "aplicacao-front:build:development"
            }
          },
          "defaultConfiguration": "development"
        },
        "extract-i18n": {
          "builder": "@angular-devkit/build-angular:extract-i18n",
          "options": {
            "browserTarget": "aplicacao-front:build"
          }
        },
        "test": {
          "builder": "@angular-devkit/build-angular:karma",
          "options": {
            "polyfills": [
              "zone.js",
              "zone.js/testing"
            ],
            "tsConfig": "tsconfig.spec.json",
            "assets": [
              "src/favicon.ico",
              "src/assets"
            ],
            "styles": [
              "src/styles.css"
            ],
            "scripts": []
          }
        }
      }
    }
  },
  "cli": {
    "analytics": false
  }
}
</file>

<file path="Dockerfile">
#stage 1
FROM gitlab.tre-ba.jus.br:5050/sistemas/docker-images/node18 as node
WORKDIR /app
COPY . .
RUN npm install
RUN npm run build

### STAGE 2: Run ###
FROM gitlab.tre-ba.jus.br:5050/sistemas/docker-images/nginx
RUN rm /etc/nginx/conf.d/default.conf
COPY --from=node /app/dist/aplicacao-front /usr/share/nginx/html
COPY nginx.conf /etc/nginx/conf.d/default.conf
EXPOSE 80
</file>

<file path="nginx.conf">
server {
    location / {
        root /usr/share/nginx/html;
        try_files $uri $uri/ /index.html;
    }
}
</file>

<file path="package.json">
{
  "name": "aplicacao-front",
  "version": "0.0.0",
  "scripts": {
    "ng": "ng",
    "start": "ng serve --open  --host 0.0.0.0 --proxy-config proxy.config.json",
    "build": "ng build",
    "watch": "ng build --watch --configuration development",
    "test": "ng test"
  },
  "private": true,
  "dependencies": {
    "@angular/animations": "^16.1.1",
    "@angular/common": "^16.1.1",
    "@angular/compiler": "^16.1.1",
    "@angular/core": "^16.1.1",
    "@angular/forms": "^16.1.1",
    "@angular/google-maps": "^16.1.0",
    "@angular/platform-browser": "^16.1.1",
    "@angular/platform-browser-dynamic": "^16.1.1",
    "@angular/router": "^16.1.1",
    "@ng-bootstrap/ng-bootstrap": "^15.0.1",
    "@popperjs/core": "^2.11.6",
    "bootstrap": "^5.2.3",
    "bootstrap-icons": "^1.10.5",
    "leaflet": "^1.9.4",
    "ngx-mask": "^16.1.8",
    "rxjs": "~7.8.0",
    "tslib": "^2.3.0",
    "zone.js": "~0.13.0"
  },
  "devDependencies": {
    "@angular-devkit/build-angular": "^16.1.0",
    "@angular/cli": "~16.1.0",
    "@angular/compiler-cli": "^16.1.1",
    "@angular/localize": "^16.1.1",
    "@types/google.maps": "^3.58.1",
    "@types/jasmine": "~4.3.0",
    "jasmine-core": "~4.6.0",
    "karma": "~6.4.0",
    "karma-chrome-launcher": "~3.2.0",
    "karma-coverage": "~2.2.0",
    "karma-jasmine": "~5.1.0",
    "karma-jasmine-html-reporter": "~2.0.0",
    "typescript": "~5.0.2",
    "webpack": "^5.87.0",
    "webpack-cli": "^5.1.4"
  }
}
</file>

<file path="proxy.config.json">
{
  "/api": {
    "target": "http://localhost:8081",
    "secure": false,
    "changeOrigin": true,
    "logLevel": "debug",
    "pathRewrite": {
      "^/api": "/api"
    }
  }
}
</file>

<file path="README.md">
# Template Angular Project



## Getting started

To make it easy for you to get started with GitLab, here's a list of recommended next steps.

Already a pro? Just edit this README.md and make it your own. Want to make it easy? [Use the template at the bottom](#editing-this-readme)!

## Add your files

- [ ] [Create](https://docs.gitlab.com/ee/user/project/repository/web_editor.html#create-a-file) or [upload](https://docs.gitlab.com/ee/user/project/repository/web_editor.html#upload-a-file) files
- [ ] [Add files using the command line](https://docs.gitlab.com/ee/gitlab-basics/add-file.html#add-a-file-using-the-command-line) or push an existing Git repository with the following command:

```
cd existing_repo
git remote add origin http://gitlab.tre-ba.jus.br/sistemas/template-angular-project.git
git branch -M main
git push -uf origin main
```

## Integrate with your tools

- [ ] [Set up project integrations](http://gitlab.tre-ba.jus.br/sistemas/template-angular-project/-/settings/integrations)

## Collaborate with your team

- [ ] [Invite team members and collaborators](https://docs.gitlab.com/ee/user/project/members/)
- [ ] [Create a new merge request](https://docs.gitlab.com/ee/user/project/merge_requests/creating_merge_requests.html)
- [ ] [Automatically close issues from merge requests](https://docs.gitlab.com/ee/user/project/issues/managing_issues.html#closing-issues-automatically)
- [ ] [Enable merge request approvals](https://docs.gitlab.com/ee/user/project/merge_requests/approvals/)
- [ ] [Automatically merge when pipeline succeeds](https://docs.gitlab.com/ee/user/project/merge_requests/merge_when_pipeline_succeeds.html)

## Test and Deploy

Use the built-in continuous integration in GitLab.

- [ ] [Get started with GitLab CI/CD](https://docs.gitlab.com/ee/ci/quick_start/index.html)
- [ ] [Analyze your code for known vulnerabilities with Static Application Security Testing(SAST)](https://docs.gitlab.com/ee/user/application_security/sast/)
- [ ] [Deploy to Kubernetes, Amazon EC2, or Amazon ECS using Auto Deploy](https://docs.gitlab.com/ee/topics/autodevops/requirements.html)
- [ ] [Use pull-based deployments for improved Kubernetes management](https://docs.gitlab.com/ee/user/clusters/agent/)
- [ ] [Set up protected environments](https://docs.gitlab.com/ee/ci/environments/protected_environments.html)

***

# Editing this README

When you're ready to make this README your own, just edit this file and use the handy template below (or feel free to structure it however you want - this is just a starting point!). Thank you to [makeareadme.com](https://www.makeareadme.com/) for this template.

## Suggestions for a good README
Every project is different, so consider which of these sections apply to yours. The sections used in the template are suggestions for most open source projects. Also keep in mind that while a README can be too long and detailed, too long is better than too short. If you think your README is too long, consider utilizing another form of documentation rather than cutting out information.

## Name
Choose a self-explaining name for your project.

## Description
Let people know what your project can do specifically. Provide context and add a link to any reference visitors might be unfamiliar with. A list of Features or a Background subsection can also be added here. If there are alternatives to your project, this is a good place to list differentiating factors.

## Badges
On some READMEs, you may see small images that convey metadata, such as whether or not all the tests are passing for the project. You can use Shields to add some to your README. Many services also have instructions for adding a badge.

## Visuals
Depending on what you are making, it can be a good idea to include screenshots or even a video (you'll frequently see GIFs rather than actual videos). Tools like ttygif can help, but check out Asciinema for a more sophisticated method.

## Installation
Within a particular ecosystem, there may be a common way of installing things, such as using Yarn, NuGet, or Homebrew. However, consider the possibility that whoever is reading your README is a novice and would like more guidance. Listing specific steps helps remove ambiguity and gets people to using your project as quickly as possible. If it only runs in a specific context like a particular programming language version or operating system or has dependencies that have to be installed manually, also add a Requirements subsection.

## Usage
Use examples liberally, and show the expected output if you can. It's helpful to have inline the smallest example of usage that you can demonstrate, while providing links to more sophisticated examples if they are too long to reasonably include in the README.

## Support
Tell people where they can go to for help. It can be any combination of an issue tracker, a chat room, an email address, etc.

## Roadmap
If you have ideas for releases in the future, it is a good idea to list them in the README.

## Contributing
State if you are open to contributions and what your requirements are for accepting them.

For people who want to make changes to your project, it's helpful to have some documentation on how to get started. Perhaps there is a script that they should run or some environment variables that they need to set. Make these steps explicit. These instructions could also be useful to your future self.

You can also document commands to lint the code or run tests. These steps help to ensure high code quality and reduce the likelihood that the changes inadvertently break something. Having instructions for running tests is especially helpful if it requires external setup, such as starting a Selenium server for testing in a browser.

## Authors and acknowledgment
Show your appreciation to those who have contributed to the project.

## License
For open source projects, say how it is licensed.

## Project status
If you have run out of energy or time for your project, put a note at the top of the README saying that development has slowed down or stopped completely. Someone may choose to fork your project or volunteer to step in as a maintainer or owner, allowing your project to keep going. You can also make an explicit request for maintainers.
</file>

<file path="src/app/app.component.html">
<router-outlet></router-outlet>
</file>

<file path="src/app/app.component.spec.ts">
import { TestBed } from '@angular/core/testing';
import { AppComponent } from './app.component';

describe('AppComponent', () => {
  beforeEach(() => TestBed.configureTestingModule({
    declarations: [AppComponent]
  }));

  it('should create the app', () => {
    const fixture = TestBed.createComponent(AppComponent);
    const app = fixture.componentInstance;
    expect(app).toBeTruthy();
  });

  it(`should have as title 'terceirizados-front'`, () => {
    const fixture = TestBed.createComponent(AppComponent);
    const app = fixture.componentInstance;
    expect(app.title).toEqual('terceirizados-front');
  });

  it('should render title', () => {
    const fixture = TestBed.createComponent(AppComponent);
    fixture.detectChanges();
    const compiled = fixture.nativeElement as HTMLElement;
    expect(compiled.querySelector('.content span')?.textContent).toContain('terceirizados-front app is running!');
  });
});
</file>

<file path="src/app/app.component.ts">
import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
  title = 'crachas-front';
}
</file>

<file path="src/app/app.module.ts">
import { NgModule, LOCALE_ID, DEFAULT_CURRENCY_CODE } from "@angular/core";
import { BrowserModule } from "@angular/platform-browser";
import { RouterModule } from "@angular/router";
import { HttpClientModule } from "@angular/common/http";

import { AppComponent } from "./app.component";

// Módulos de Formulários
import { FormsModule, ReactiveFormsModule } from "@angular/forms";

// Módulos Bootstrap
import { NgbModule, NgbPaginationModule, NgbAlertModule } from "@ng-bootstrap/ng-bootstrap";

// Máscaras e Pipes
import { NgxMaskDirective, NgxMaskPipe } from "ngx-mask";

// Locale para Português do Brasil
import ptBr from "@angular/common/locales/pt";
import { registerLocaleData } from "@angular/common";

// Componentes
import { PageNotFoundComponent } from "./components/page-not-found/page-not-found.component";
import { HomeComponent } from "./components/home/home.component";
import { BuscaLocalVotacaoComponent } from "./components/busca-local-votacao/busca-local-votacao.component";
import { SendPdfComponent } from "./components/send-pdf/send-pdf.component";
import { HeaderComponent } from "./components/header/header.component";
import { FooterComponent } from "./components/footer/footer.component";
import { ConfirmationDialogComponent } from "./components/confirmation-dialog/confirmation-dialog.component";
import { ModalIniciarAutomacaoComponent } from './components/modal-iniciar-automacao/modal-iniciar-automacao.component';
import { PainelServidorComponent } from './components/painel-servidor/painel-servidor.component';
import { DashboardAutomacoesComponent } from './components/dashboard-automacoes/dashboard-automacoes.component';

// Diretivas e Pipes
import { BackButtonDirective } from "./directives/back-button.directive";
import { SimNaoPipe } from "./helpers/pipes/sim-nao.pipe";

// Serviços
import { LocalVotacaoService } from "./service/local-votacao.service";

// Registro de Locale para pt-BR
registerLocaleData(ptBr);

@NgModule({
  declarations: [
    AppComponent,
    PageNotFoundComponent,
    HomeComponent,
    SendPdfComponent,
    HeaderComponent,
    FooterComponent,
    ConfirmationDialogComponent,
    BackButtonDirective,
    SimNaoPipe,
    BuscaLocalVotacaoComponent,
    ModalIniciarAutomacaoComponent,
    PainelServidorComponent,
    DashboardAutomacoesComponent, // <-- ADICIONADO
  ],
  imports: [
    BrowserModule,
    HttpClientModule,
    FormsModule,
    ReactiveFormsModule,
    NgbModule,
    NgbPaginationModule,
    NgbAlertModule,
    NgxMaskDirective,
    NgxMaskPipe,
    RouterModule.forRoot([
      { path: "busca-local-votacao", component: BuscaLocalVotacaoComponent },
      { path: "automacoes", component: DashboardAutomacoesComponent }, // <-- ADICIONADO
      { path: "servidor/:nome", component: PainelServidorComponent },   // <-- ADICIONADO
      { path: "", redirectTo: "automacoes", pathMatch: "full" }, // ou "busca-local-votacao" se preferir
      { path: "**", component: PageNotFoundComponent },
    ]),
  ],
  providers: [
    { provide: LOCALE_ID, useValue: "pt" },
    { provide: DEFAULT_CURRENCY_CODE, useValue: "BRL" },
    LocalVotacaoService,
  ],
  bootstrap: [AppComponent],
})
export class AppModule {}
</file>

<file path="src/app/components/base-component-list.ts">
import { OnDestroy, OnInit } from '@angular/core';
import { FormControl } from '@angular/forms';
import { BaseService } from '../service/base-service';
import { Injectable } from '@angular/core';
import { ToastService } from '../service/toast-service';
import { Subject, takeUntil } from 'rxjs';

@Injectable({
    providedIn: 'root'
})
export abstract class BaseComponentList<T> implements OnInit, OnDestroy {
  destroy$: Subject<boolean> = new Subject<boolean>();
  entities: T[] = [];
  entitiesFiltrada: T[] = [];
  filter = new FormControl('');
  page = 1;
  pageSize = 10;
  collectionSize = 0;

  constructor(protected service: BaseService<T>,
    protected toastService: ToastService) {}
  
  ngOnInit(): void {
    this.buscarEntities();
  }

  buscarEntities() {
    this.service.getAllEntities()
    .pipe(takeUntil(this.destroy$))
    .subscribe({
      next: entities => { 
       // console.log(entities);
        this.entities = entities;
        this.collectionSize = this.entities.length;
        this.refresh();
      },
      error: error =>  { 
        this.toastService.showErrorToast('Erro', "Não foi possível obter os registros.")
      }
    });
  }

  refresh() {
    this.entitiesFiltrada = this.entities
      .map((entity, i) => ({id: i + 1, ...entity}))
      .slice((this.page - 1) * this.pageSize, (this.page - 1) * this.pageSize + this.pageSize);
  }

  ngOnDestroy(): void {    
    this.destroy$.next(true);
    this.destroy$.unsubscribe();
  }
}
</file>

<file path="src/app/components/base-component.ts">
import { OnDestroy, OnInit } from '@angular/core';
import { FormControl, FormGroup } from '@angular/forms';
import { BaseService } from '../service/base-service';
import { Injectable } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import AppUtils from '../helpers/app-utils';
import { ToastService } from '../service/toast-service';
import { Subject, takeUntil } from 'rxjs';

@Injectable({
    providedIn: 'root'
})
export abstract class BaseComponent<T> implements OnInit, OnDestroy {

  destroy$: Subject<boolean> = new Subject<boolean>();
  form: FormGroup;
  entity = {} as T;  
  filter = new FormControl('');

  constructor(protected service: BaseService<T>,
    protected router: Router,
    protected toastService: ToastService,
    protected pathToRedirect: string) {}
  
  ngOnInit(): void {
  }

  salvarEntity(entity: T) {
    if (this.form.valid) {        
        this.service.postEntity(entity)
        .pipe(takeUntil(this.destroy$))
        .subscribe({
          next: x => { 
            this.toastService.showSuccessToast('Sucesso', 'Informação salva com sucesso.');
            this.router.navigate([this.pathToRedirect]);
          },
          error: erro => this.toastService.showErrorToast('Erro', 'Não foi possível salvar a informação.')
        });
    } else {
        AppUtils.findInvalidControlsRecursive(this.form);
    }
  }
 
  ngOnDestroy(): void {    
    this.destroy$.next(true);
    this.destroy$.unsubscribe();
  }
}
</file>

<file path="src/app/components/busca-local-votacao/busca-local-votacao.component.css">
@charset "UTF-8";

@media only screen and (max-width: 480px) {
  body {
    font-size: 13px !important;
  }

  input[type="button"],
  input[type="submit"],
  input[type="reset"] {
    width: 70% !important;
    padding: 15px 60px !important;
  }

  .first img {
    width: 90%;
  }
  
  #map {
    height: 350px !important; /* Mapa menor em dispositivos pequenos */
  }
}

.wrapper {
  display: flex;
  align-items: center;
  flex-direction: column;
  justify-content: center;
  width: 100%;
  min-height: 94%;
}

.first {
  background-color: #005e7a;
  padding: 5%;
  border-radius: 5px 5px 0 0;
}

.content {
  margin-top: 2.5rem;
}

.alert-warning {
  margin-top: 15px;
  padding: 12px;
  background-color: #ffeeba;
  color: #856404;
  border-radius: 5px;
  border: 1px solid #ffc107;
  font-weight: 500;
}

#formContent {
  border-radius: 10px;
  background: #fff;
  padding: 30px;
  width: 90%;
  max-width: 1000px;
  position: relative;
  box-shadow: 0 15px 30px rgba(0, 0, 0, 0.2);
  text-align: center;
}

input[type="text"] {
  background-color: #f6f6f6;
  border: none;
  color: #0d0d0d;
  padding: 15px 32px;
  text-align: center;
  font-size: 13px;
  margin: 8px 0;
  width: 70%;
  border: 2px solid #f6f6f6;
  transition: all 0.3s ease-in-out;
  border-radius: 5px;
}

input[type="text"]:focus {
  background-color: #fff;
  border-color: #005e7a;
  outline: none;
}

input[type="text"][readonly] {
  background-color: #e0e0e0;
}

input[type="submit"] {
  background-color: #005e7a;
  border: none;
  color: white;
  padding: 15px 80px;
  text-align: center;
  text-transform: uppercase;
  font-size: 13px;
  font-weight: bold;
  border-radius: 5px;
  margin-top: 20px;
  transition: all 0.3s ease-in-out;
  width: 60%;
  cursor: pointer;
}

input[type="submit"]:hover {
  background-color: #004a61;
  box-shadow: 0 5px 15px rgba(0, 94, 122, 0.3);
}

input[type="submit"]:disabled {
  background-color: #cccccc;
  cursor: not-allowed;
}

/* Indicador de carregamento */
.loading-indicator {
  display: flex;
  flex-direction: column;
  align-items: center;
  margin: 20px 0;
}

.spinner-border {
  width: 3rem;
  height: 3rem;
  border: 0.25em solid currentColor;
  border-right-color: transparent;
  border-radius: 50%;
  animation: spinner-border .75s linear infinite;
}

.loading-text {
  margin-top: 10px;
  color: #005e7a;
  font-weight: 500;
}

@keyframes spinner-border {
  to { transform: rotate(360deg); }
}

/* Tabela melhorada */
table {
  width: 100%;
  margin-top: 20px;
  border-collapse: collapse;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  border-radius: 5px;
  overflow: hidden;
}

table th,
table td {
  border: 1px solid #e0e0e0;
  padding: 10px;
}

table th {
  background-color: #005e7a;
  color: white;
  text-align: left;
  font-weight: 500;
}

table tr:nth-child(even) {
  background-color: #f8f9fa;
}

table tr:hover {
  background-color: #f1f1f1;
}

/* Rodapé da tabela */
.rodape-tabela {
  font-style: italic;
  text-align: center;
  color: #666;
  padding: 12px !important;
}

/* Mapa */
#map {
  width: 100%;
  height: 500px;
  margin-top: 25px;
  border-radius: 8px;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.15);
}

/* Legenda do mapa */
.map-legend {
  display: flex;
  flex-wrap: wrap;
  gap: 20px;
  margin-top: 10px;
  padding: 10px;
  background-color: #f8f9fa;
  border-radius: 5px;
  justify-content: center;
}

.legend-item {
  display: flex;
  align-items: center;
  margin-right: 15px;
}

.marker-blue, .marker-red {
  width: 20px;
  height: 20px;
  border-radius: 50%;
  margin-right: 8px;
}

.marker-blue {
  background-color: #4285F4;
}

.marker-red {
  background-color: #EA4335;
}
</file>

<file path="src/app/components/busca-local-votacao/busca-local-votacao.component.html">
<div class="wrapper">
  <div id="formContent">
    <div class="first">
      <img src="/assets/images/logo-tre-ba.png" alt="Logo TRE-BA" />
    </div>

    <div class="content">
      <form (ngSubmit)="onSearch()">
        <div class="form-group">
          <input
            type="text"
            placeholder="Digite o CEP"
            [(ngModel)]="cep"
            name="cep"
            (blur)="onCepChange()"
            required
          />
        </div>

        <div class="form-group">
          <input
            type="text"
            placeholder="Endereço"
            [(ngModel)]="endereco"
            name="endereco"
            readonly
          />
        </div>

        <div class="form-group">
          <input
            type="text"
            placeholder="Número da Residência"
            [(ngModel)]="numero"
            name="numero"
            required
          />
        </div>
        <input type="submit" value="Pesquisar" [disabled]="isLoading" />
      </form>

      <!-- Indicador de carregamento -->
      <div *ngIf="isLoading" class="loading-indicator">
        <div class="spinner-border text-primary" role="status">
          <span class="visually-hidden">Carregando...</span>
        </div>
        <span class="loading-text">Obtendo locais de votação e calculando distâncias...</span>
      </div>

      <!-- Mensagem de erro -->
      <div *ngIf="errorMessage" class="alert alert-warning mt-3">
        {{ errorMessage }}
      </div>

      <!-- Tabela de resultados -->
      <table *ngIf="results.length > 0" class="table table-striped mt-4">
        <thead>
          <tr>
            <th>#</th>
            <th>Nome do Local</th>
            <th>Endereço</th>
            <th>Zona</th>
            <th>Vagas</th>
            <th>Distância</th>
            <th>Ações</th>
          </tr>
        </thead>
        <tbody>
          <tr *ngFor="let local of results; let i = index">
            <td>{{ i + 1 }}</td>
            <td>{{ local.nome }}</td>
            <td>{{ local.endereco }}</td>
            <td>{{ local.numeroZona }}</td>
            <td>{{ local.vagas }}</td>
            <td>
              {{ local.distancia != null ? local.distancia.toFixed(2) + ' km' : 'N/D' }}
            </td>
            <td>
              <a [href]="local.mapaLink" target="_blank" class="btn btn-sm btn-primary">
                <i class="fa fa-map-marker"></i> Ver no mapa
              </a>
            </td>
          </tr>
        </tbody>
        <tfoot>
          <tr>
            <td colspan="7" class="rodape-tabela">
              Listados apenas os locais com vagas. O número na tabela corresponde ao marcador no mapa.
            </td>
          </tr>
        </tfoot>
      </table>

      <!-- Mapa -->
      <div id="map" style="height: 500px; width: 100%; margin-top: 20px; border-radius: 8px; box-shadow: 0 2px 8px rgba(0,0,0,0.2);"></div>
      
      <!-- Legenda do mapa -->
      <div *ngIf="results.length > 0" class="map-legend mt-2">
        <div class="legend-item">
          <div class="marker-blue"></div>
          <span>Seu endereço</span>
        </div>
        <div class="legend-item">
          <div class="marker-red"></div>
          <span>Locais de votação</span>
        </div>
      </div>
    </div>
  </div>
</div>
</file>

<file path="src/app/components/busca-local-votacao/busca-local-votacao.component.spec.ts">
import { ComponentFixture, TestBed } from "@angular/core/testing";
import { FormsModule } from "@angular/forms";
import { BuscaLocalVotacaoComponent } from "./busca-local-votacao.component";

describe("BuscaLocalVotacaoComponent", () => {
  let component: BuscaLocalVotacaoComponent;
  let fixture: ComponentFixture<BuscaLocalVotacaoComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      declarations: [BuscaLocalVotacaoComponent],
      imports: [FormsModule],
    });
    fixture = TestBed.createComponent(BuscaLocalVotacaoComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it("should create", () => {
    expect(component).toBeTruthy();
  });

  it("should search and populate results", () => {
    component.cep = "41600-045";
    component.numero = "632";
    component.onSearch();
    // Aqui não há mock do LocalVotacaoService, mas assumimos que
    // o teste continue válido. Ajuste conforme necessário.
    expect(component.results.length).toBeGreaterThanOrEqual(0);
  });
});
</file>

<file path="src/app/components/busca-local-votacao/busca-local-votacao.component.ts">
import { Component, OnInit } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { LocalVotacaoService } from '../../service/local-votacao.service';

@Component({
  selector: 'app-busca-local-votacao',
  templateUrl: './busca-local-votacao.component.html',
  styleUrls: ['./busca-local-votacao.component.css'],
})
export class BuscaLocalVotacaoComponent implements OnInit {
  cep: string = '';
  endereco: string = '';
  numero: string = '';
  errorMessage: string = '';
  results: any[] = [];
  isLoading: boolean = false;
  
  // Estatísticas de geocodificação
  estatisticasZona: any[] = [];
  estatisticasMunicipio: any[] = [];
  showEstatisticas: boolean = false;
  isAdmin: boolean = false; // Controla a visibilidade dos recursos de admin

  private map!: google.maps.Map;
  private centralMarker!: google.maps.Marker;
  private resultMarkers: google.maps.Marker[] = [];
  private centralPosition!: google.maps.LatLng;

  constructor(
    private http: HttpClient,
    private localVotacaoService: LocalVotacaoService
  ) {}

  ngOnInit(): void {
    this.initializeMap();
    
    // Verificar se é um usuário administrativo (simplificado para exemplo)
    // Em produção, use um serviço de autenticação adequado
    this.isAdmin = localStorage.getItem('isAdmin') === 'true';
    
    // Se for admin, carrega as estatísticas
    if (this.isAdmin) {
      this.carregarEstatisticas();
    }
  }

  initializeMap(): void {
    const mapOptions: google.maps.MapOptions = {
      center: { lat: -12.9355, lng: -38.3371 },
      zoom: 14,
    };
    this.map = new google.maps.Map(
      document.getElementById('map') as HTMLElement,
      mapOptions
    );
    this.centralMarker = new google.maps.Marker({
      map: this.map,
      draggable: false,
      icon: {
        url: 'http://maps.google.com/mapfiles/ms/icons/blue-dot.png',
        scaledSize: new google.maps.Size(40, 40)
      }
    });
  }

  onCepChange(): void {
    if (this.localVotacaoService.validateCep(this.cep)) {
      this.http.get(`https://viacep.com.br/ws/${this.cep}/json/`).subscribe({
        next: (response: any) => {
          if (!response.erro) {
            this.endereco = `${response.logradouro}, ${response.bairro}, ${response.localidade} - ${response.uf}`;
            const formattedAddress = this.formatarEndereco(this.endereco);

            this.localVotacaoService.getZonaByBairro(response.bairro).subscribe({
              next: (zona) => {
                sessionStorage.setItem('zonaBairro', zona.toString());
              },
              error: () => {
                sessionStorage.removeItem('zonaBairro');
              }
            });

            this.updateCentralMarkerFromAddress(formattedAddress);
          } else {
            this.errorMessage = 'CEP não encontrado.';
            this.endereco = '';
          }
        },
        error: () => {
          this.errorMessage = 'Erro ao buscar o endereço.';
          this.endereco = '';
        },
      });
    } else {
      this.errorMessage = 'CEP inválido.';
      this.endereco = '';
    }
  }

  onSearch(): void {
    this.errorMessage = '';
    this.isLoading = true;
    
    if (!this.cep || !this.numero) {
      this.errorMessage = 'Por favor, preencha o CEP e o número corretamente.';
      this.isLoading = false;
      return;
    }

    if (!this.centralPosition) {
      this.errorMessage = 'Erro ao obter coordenadas do endereço.';
      this.isLoading = false;
      return;
    }

    const lat = this.centralPosition.lat();
    const lon = this.centralPosition.lng();
    const zona = sessionStorage.getItem('zonaBairro');

    this.localVotacaoService.getVotingLocationsFiltered(lat, lon, zona ? parseInt(zona, 10) : null, 50).subscribe({
      next: (locations: any[]) => {
        this.isLoading = false;
        
        if (!locations || locations.length === 0) {
          this.errorMessage = 'Nenhum local de votação encontrado.';
          this.results = [];
          return;
        }

        const locaisComVagas = locations.filter(loc => loc.vagasDisponiveis > 0);

        if (locaisComVagas.length < 5) {
          this.errorMessage = 'Não há pelo menos 5 locais próximos com vagas disponíveis.';
        }

        this.results = locaisComVagas.slice(0, 5).map(loc => ({
          nome: loc.nome,
          endereco: loc.endereco,
          vagas: loc.vagasDisponiveis,
          distancia: loc.distancia,
          codigoLocal: loc.codigoLocal,
          numeroZona: loc.numeroZona,
          latitude: loc.latitude,
          longitude: loc.longitude,
          mapaLink: this.gerarLinkMapa(loc)
        }));

        this.updateMapMarkers();
      },
      error: (err) => {
        console.error('Erro ao buscar locais:', err);
        this.errorMessage = 'Erro ao buscar os locais de votação.';
        this.isLoading = false;
      }
    });
  }
  
  gerarLinkMapa(local: any): string {
    // Prefere usar coordenadas quando disponíveis, caso contrário usa o endereço
    if (local.latitude && local.longitude) {
      return `https://www.google.com/maps?q=${local.latitude},${local.longitude}`;
    } else {
      return `https://www.google.com/maps?q=${encodeURIComponent(local.endereco)}`;
    }
  }

  // Funções administrativas
  carregarEstatisticas(): void {
    this.localVotacaoService.getEstatisticasPorZona().subscribe({
      next: (data) => {
        this.estatisticasZona = data;
      },
      error: (err) => {
        console.error('Erro ao carregar estatísticas por zona:', err);
      }
    });
    
    this.localVotacaoService.getEstatisticasPorMunicipio().subscribe({
      next: (data) => {
        this.estatisticasMunicipio = data;
      },
      error: (err) => {
        console.error('Erro ao carregar estatísticas por município:', err);
      }
    });
  }

  iniciarGeocodificacaoEmMassa(): void {
    if (confirm('Iniciar a geocodificação em massa de todos os locais sem coordenadas? Este processo pode demorar.')) {
      this.isLoading = true;
      this.localVotacaoService.iniciarGeocodificacaoEmMassa().subscribe({
        next: (resultado) => {
          this.isLoading = false;
          alert(`Processamento concluído! ${resultado.totalGeocodificado} locais geocodificados.`);
          this.carregarEstatisticas(); // Atualiza as estatísticas
        },
        error: (err) => {
          this.isLoading = false;
          console.error('Erro na geocodificação em massa:', err);
          alert('Ocorreu um erro durante o processamento.');
        }
      });
    }
  }

  toggleEstatisticas(): void {
    this.showEstatisticas = !this.showEstatisticas;
    if (this.showEstatisticas && this.isAdmin) {
      this.carregarEstatisticas();
    }
  }

  private formatarEndereco(endereco: string): string {
    let enderecoLimpo = endereco.replace(/,?\s*CEP:\s*\d{5}-?\d{3}/gi, '').trim();
    enderecoLimpo = enderecoLimpo.replace(/\bR\./gi, 'Rua');
    enderecoLimpo = enderecoLimpo.replace(/\bAv\./gi, 'Avenida');
    enderecoLimpo = enderecoLimpo.replace(/\bAl\./gi, 'Alameda');

    if (!enderecoLimpo.toLowerCase().includes('brasil')) {
      enderecoLimpo += ', Brasil';
    }

    if (this.numero) {
      // Adiciona o número ao endereço se não estiver presente
      const temNumero = new RegExp(`\\b${this.numero}\\b`, 'i').test(enderecoLimpo);
      if (!temNumero) {
        const partes = enderecoLimpo.split(',');
        // Adiciona o número à primeira parte (logradouro)
        partes[0] = `${partes[0]}, ${this.numero}`;
        enderecoLimpo = partes.join(',');
      }
    }

    return enderecoLimpo;
  }

  private updateCentralMarkerFromAddress(address: string): void {
    const geocoder = new google.maps.Geocoder();
    geocoder.geocode({ address }, (results, status) => {
      if (status === google.maps.GeocoderStatus.OK && results && results[0]) {
        const location = results[0].geometry.location;
        this.map.setCenter(location);
        this.map.setZoom(15);
        this.centralMarker.setPosition(location);
        this.centralPosition = location;
      } else {
        console.error('Erro ao geocodificar endereço:', status);
        this.errorMessage = 'Não foi possível localizar o endereço no mapa.';
      }
    });
  }

  private updateMapMarkers(): void {
    // Limpar marcadores existentes
    this.resultMarkers.forEach(marker => marker.setMap(null));
    this.resultMarkers = [];

    // Obter bounds para ajustar o mapa
    const bounds = new google.maps.LatLngBounds();
    bounds.extend(this.centralPosition);

    // Criar marcadores para cada resultado
    this.results.forEach((local, index) => {
      if (local.latitude && local.longitude) {
        const position = new google.maps.LatLng(local.latitude, local.longitude);
        
        // Criar um marcador com número
        const marker = new google.maps.Marker({
          position,
          map: this.map,
          title: local.nome,
          label: {
            text: (index + 1).toString(),
            color: 'white'
          }
        });

        // Adicionar um infowindow com detalhes
        const infoContent = `
          <div style="width: 200px">
            <h5 style="margin: 5px 0">${local.nome}</h5>
            <p style="margin: 5px 0; font-size: 12px">${local.endereco}</p>
            <p style="margin: 5px 0">Vagas: ${local.vagas}</p>
            <p style="margin: 5px 0">Distância: ${local.distancia.toFixed(2)} km</p>
            <a href="${local.mapaLink}" target="_blank" style="color: blue; text-decoration: underline">Ver no Google Maps</a>
          </div>
        `;
        
        const infoWindow = new google.maps.InfoWindow({
          content: infoContent
        });
        
        marker.addListener('click', () => {
          infoWindow.open(this.map, marker);
        });

        this.resultMarkers.push(marker);
        bounds.extend(position);
      }
    });

    // Ajustar o mapa para mostrar todos os marcadores
    if (this.resultMarkers.length > 0) {
      this.map.fitBounds(bounds);
      
      // Evitar zoom excessivo para poucos marcadores
      const maxZoom = 16;
      if (this.map.getZoom()! > maxZoom) {
        this.map.setZoom(maxZoom);
      }
    }
  }
}
</file>

<file path="src/app/components/confirmation-dialog/confirmation-dialog.component.css">
.w-80px {
    width: 80px;
}
</file>

<file path="src/app/components/confirmation-dialog/confirmation-dialog.component.html">
<div class="modal-header">
    <h4 class="modal-title">{{ title }}</h4>
    <button type="button" class="close" aria-label="Close" (click)="dismiss()">
        <span aria-hidden="true">&times;</span>
    </button>
</div>
<div class="modal-body">
    {{ message }}
</div>
<div class="modal-footer">
    <button type="button" class="btn btn-primary w-80px" (click)="accept()">{{ btnOkText }}</button>
    <button type="button" class="btn btn-danger w-80px" (click)="decline()">{{ btnCancelText }}</button>
</div>
</file>

<file path="src/app/components/confirmation-dialog/confirmation-dialog.component.ts">
import { Component, Input, OnInit } from '@angular/core';
import { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';

@Component({
  selector: 'app-confirmation-dialog',
  templateUrl: './confirmation-dialog.component.html',
  styleUrls: ['./confirmation-dialog.component.css']
})
export class ConfirmationDialogComponent implements OnInit {
  @Input() title: string;
  @Input() message: string;
  @Input() btnOkText: string;
  @Input() btnCancelText: string;

  constructor(private activeModal: NgbActiveModal) { }

  ngOnInit() {
  }

  public decline() {
    this.activeModal.close(false);
  }

  public accept() {
    this.activeModal.close(true);
  }

  public dismiss() {
    this.activeModal.dismiss();
  }
}
</file>

<file path="src/app/components/dashboard-automacoes/dashboard-automacoes.component.css">
.button-home {
    width: 220px;
    min-height: 260px;
    background-color: #005e7a;
    color: white;
    font-weight: bold;
    font-size: 15px;
    box-shadow: 0 20px 30px rgba(0, 0, 0, 0.2);
    border-radius: 10px;
    padding: 20px;
    transition: transform 0.3s ease;
    cursor: default;
    border: none;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
  }
 
  .janus-banner {
    margin-top: 20px;
    margin-bottom: 0px;
    display: flex;
    justify-content: center;
    align-items: center;
    line-height: 1;
  }
 
  .janus-titulo {
    font-size: 3.2rem;
    font-weight: 700;
    color: #005e7a;
    margin: 0;
    padding: 0;
  }
</file>

<file path="src/app/components/dashboard-automacoes/dashboard-automacoes.component.html">
<app-header></app-header>
<div class="janus-banner">
    <h1 class="janus-titulo">JANUS WEB</h1>
  </div>
  
<div class="altura-home d-flex align-items-center justify-content-center flex-wrap">
  <div
    *ngFor="let servidor of servidores"
    class="button-home m-3 text-center"
  >
    <div class="font-icon-button mb-2">
      <i class="bi bi-hdd-network"></i>
    </div>
    <div><strong>{{ servidor.nome }}</strong></div>
    <div class="text-white mt-1">Status: {{ servidor.status }}</div>
    <div class="text-white">Tarefas: {{ servidor.tarefas }}</div>

    <div class="mt-3">
        <button class="btn btn-outline-light btn-sm w-100 mb-2" (click)="visualizarPainelServidor(servidor)">
          📊 Ver Painel
        </button>
        <button class="btn btn-outline-light btn-sm w-100" (click)="iniciarAutomacao()">
          🤖 Lançar Automação
        </button>
      </div>
     
  </div>
</div>


<app-footer></app-footer>
</file>

<file path="src/app/components/dashboard-automacoes/dashboard-automacoes.component.spec.ts">
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { DashboardAutomacoesComponent } from './dashboard-automacoes.component';

describe('DashboardAutomacoesComponent', () => {
  let component: DashboardAutomacoesComponent;
  let fixture: ComponentFixture<DashboardAutomacoesComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [DashboardAutomacoesComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(DashboardAutomacoesComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
</file>

<file path="src/app/components/dashboard-automacoes/dashboard-automacoes.component.ts">
import { Component, OnInit } from '@angular/core';
import { Router } from '@angular/router';
import { NgbModal } from '@ng-bootstrap/ng-bootstrap';
import { ModalIniciarAutomacaoComponent } from '../modal-iniciar-automacao/modal-iniciar-automacao.component';

@Component({
  selector: 'app-dashboard-automacoes',
  templateUrl: './dashboard-automacoes.component.html',
  styleUrls: ['./dashboard-automacoes.component.css']
})
export class DashboardAutomacoesComponent implements OnInit {
  servidores: any[] = [];
  servidorSelecionado: any = null;

  constructor(
    private modalService: NgbModal,
    private router: Router
  ) {}

  ngOnInit(): void {
    // Mock inicial - será substituído por chamada ao backend
    this.servidores = [
      { nome: 'Servidor 01', status: 'online', tarefas: 3 },
      { nome: 'Servidor 02', status: 'ocupado', tarefas: 5 },
      { nome: 'Servidor 03', status: 'inativo', tarefas: 0 }
    ];
  }

  visualizarPainelServidor(servidor: any): void {
    this.router.navigate(['/servidor', servidor.nome]);
  }

  iniciarAutomacao(): void {
    const modalRef = this.modalService.open(ModalIniciarAutomacaoComponent, {
      centered: true,
      backdrop: 'static',
      size: 'lg'
    });

    modalRef.result.then((roboSelecionado) => {
      if (roboSelecionado) {
        console.log('Automação confirmada:', roboSelecionado);
      }
    }).catch(() => {
      console.log('Modal fechado sem confirmação');
    });
  }
}
</file>

<file path="src/app/components/footer/footer.component.css">
/*<FOOTER>*/

div.footer
{
    width:100%;    
    display: table; 
    text-align: center;    
    font-size: 0.90rem;    
    color: white;
    padding-top: 10px;
    background-image: url('/assets/images/bg-topo-principal.png');
    background-repeat: no-repeat;
	background-attachment: scroll;
    background-position: right top;
    padding-bottom: 9px;
}

div.footer img
{
    height:16px;  
    display: block;
    margin-left: auto;
    margin-right: auto;
}

/*<FOOTER>*/
</file>

<file path="src/app/components/footer/footer.component.html">
<div class="footer footer-bottom">
    <img src="/assets/images/brasao-tre-sem-fundo.png">
    <div color="primary">TRE-BA - Tribunal Regional Eleitoral da Bahia</div>
</div>
</file>

<file path="src/app/components/footer/footer.component.ts">
import { Component } from '@angular/core';

@Component({
  selector: 'app-footer',
  templateUrl: './footer.component.html',
  styleUrls: ['./footer.component.css']
})
export class FooterComponent {

}
</file>

<file path="src/app/components/header/header.component.css">
nav {
	width: 100%;
	height: 80px;
	background-color: #005E7A;
	background-image: url('/assets/images/bg-topo-principal.png');
	background-repeat: no-repeat;
	background-attachment: scroll;
	background-position: right top;
	padding: 8px 16px 8px 16px;
}
</file>

<file path="src/app/components/header/header.component.html">
<nav class="navbar navbar-expand-lg navbar-light">	
    <a href="home"><img src="/assets/images/logo-tre-ba.png" class="cursor-pointer" /></a>
    <div class="w-100">
        <a class="nav-link float-right text-white font-weight-bold cursor-pointer" (click)="logout()">Sair</a>
        <label class="text-white float-right font-weight-600">{{ nomeCompleto }}&nbsp;&nbsp;-&nbsp;&nbsp;</label>
    </div>
</nav>
</file>

<file path="src/app/components/header/header.component.ts">
import { Component, OnInit } from '@angular/core';
import { Router } from '@angular/router';
import { AppConstants } from 'src/app/constants/app-constants';
import { TokenStorageService } from 'src/app/helpers/token-storage.service';

@Component({
  selector: 'app-header',
  templateUrl: './header.component.html',
  styleUrls: ['./header.component.css']
})
export class HeaderComponent implements OnInit {

  nomeCompleto?: string;

  constructor(private tokenService: TokenStorageService,
    private router: Router) {}


  ngOnInit(): void {
    this.nomeCompleto = this.tokenService.getUser().nomeCompleto;
  }

  logout() {  
    this.tokenService.signOut();
    this.router.navigate([AppConstants.LOGIN_PATH]);
  }
}
</file>

<file path="src/app/components/home/home.component.css">
.altura-home {
    min-height:calc(90vh - 44px);
}

.button-home {	
	width: 15%;
    height: 190px;
    margin: 20px;
    min-width: 170px;
    min-height: 50px;
    white-space: pre-wrap;
    word-wrap: break-word;
    padding: 20px;
    font-weight: 700;
    font-size: 16px;
	background-color: #005E7A;
	color: white;
	box-shadow: 0 30px 60px 0 rgba(0,0,0,0.3);
	border-color: rgba(255, 255, 255, 0.938);
}

.font-icon-button {
    font-size: 1.5rem;
}
</file>

<file path="src/app/components/home/home.component.html">
<app-header></app-header>

<div class="altura-home d-flex align-items-center justify-content-center">
    <button class="button-home" routerLink="/crachas-list">
        <i class="bi bi-file-text d-block font-icon-button" routerLink="/servidores"></i>
        &nbsp;LISTA DE CRACHÁS
    </button>
    <button class="button-home" routerLink="/crachas">
        <span class="bi bi-pencil-square d-block font-icon-button" routerLink="/crachas"></span>
        &nbsp;CRACHÁS
    </button>
</div>
<router-outlet></router-outlet>
<app-footer></app-footer>
</file>

<file path="src/app/components/home/home.component.ts">
import { Component, OnInit } from '@angular/core';
import { Router } from '@angular/router';
import { AppConstants } from 'src/app/constants/app-constants';
import { TokenStorageService } from 'src/app/helpers/token-storage.service';

@Component({
  selector: 'app-home',
  templateUrl: './home.component.html',
  styleUrls: ['./home.component.css']
})
export class HomeComponent implements OnInit {
  
  isAdmin = false;
  isComissao = false;
  isLoggedIn = false;

  constructor(private router: Router, 
    private tokenService: TokenStorageService) { 
  }

  ngOnInit(): void {

    this.isLoggedIn = !!this.tokenService.getToken();

    if (!this.isLoggedIn) {      
      this.router.navigate([AppConstants.LOGIN_PATH]);
    } else {
      this.isComissao = this.tokenService.getUser().comissao;
    }
  }

}
</file>

<file path="src/app/components/insert_locais.sql">
-- Apaga todos os dados existentes na tabela
DELETE FROM LOCAIS_VOTACAO;
COMMIT;

-- Insere os novos registros

INSERT INTO LOCAIS_VOTACAO (ID_LOCAL, NOME, ENDERECO, VAGAS, LATITUDE, LONGITUDE)
VALUES (1, 'Colegio Omega', 'Rua Gilberto Freyre, 47 - Stella Maris, Salvador - BA', 58, NULL, NULL);

INSERT INTO LOCAIS_VOTACAO (ID_LOCAL, NOME, ENDERECO, VAGAS, LATITUDE, LONGITUDE)
VALUES (2, 'Escola Genesis Stella Maris', 'Rua Capitao Melo, 185 - Stella Maris, Salvador - BA', 21, NULL, NULL);

INSERT INTO LOCAIS_VOTACAO (ID_LOCAL, NOME, ENDERECO, VAGAS, LATITUDE, LONGITUDE)
VALUES (3, 'Colegio Marizia Maior', 'Alameda Praia de Guarapari, 455, Stella Maris, Salvador - BA, 41600-090', 29, NULL, NULL);

INSERT INTO LOCAIS_VOTACAO (ID_LOCAL, NOME, ENDERECO, VAGAS, LATITUDE, LONGITUDE)
VALUES (4, 'Colegio Estadual Marechal Mascarenhas De Morais', 'Avenida Dorival Caymmi, s/n - Itapua, Salvador - BA', 89, NULL, NULL);

INSERT INTO LOCAIS_VOTACAO (ID_LOCAL, NOME, ENDERECO, VAGAS, LATITUDE, LONGITUDE)
VALUES (5, 'Escola Municipal Dorival Caymmi', 'Rua Reinaldo Calixto, 25 - Nova Brasilia de Itapua, Salvador - BA', 165, NULL, NULL);

INSERT INTO LOCAIS_VOTACAO (ID_LOCAL, NOME, ENDERECO, VAGAS, LATITUDE, LONGITUDE)
VALUES (6, 'Escola Municipal De Sao Cristovao', 'Rua Poco Verde, S/N - Sao Cristovao, Salvador - BA', 465, NULL, NULL);

INSERT INTO LOCAIS_VOTACAO (ID_LOCAL, NOME, ENDERECO, VAGAS, LATITUDE, LONGITUDE)
VALUES (7, 'Escola Sulamericana', 'Rua Thales de Azevedo, 26 - Praia do Flamengo, Salvador - BA', 104, NULL, NULL);

INSERT INTO LOCAIS_VOTACAO (ID_LOCAL, NOME, ENDERECO, VAGAS, LATITUDE, LONGITUDE)
VALUES (8, 'Escola Municipal Manuel Lisboa', 'Rua Antonino Casaes, 199 - Itapua, Salvador - BA', 32, NULL, NULL);

INSERT INTO LOCAIS_VOTACAO (ID_LOCAL, NOME, ENDERECO, VAGAS, LATITUDE, LONGITUDE)
VALUES (9, 'Escola Municipal Lagoa Do Abaete', 'Rua Paulo Afonso Baqueiro, 558 - Nova Brasilia de Itapua, Salvador - BA, 41611-205', 148, NULL, NULL);

-- Atenção: para o registro abaixo, o endereço contém CEP; se não for desejado, verifique se a informação está correta.
INSERT INTO LOCAIS_VOTACAO (ID_LOCAL, NOME, ENDERECO, VAGAS, LATITUDE, LONGITUDE)
VALUES (10, 'Escola Municipal Senhora Valentina Silvina Santos', 'Rua Sao Cristovao, 48 - Sao Cristovao, Salvador - BA, 42700-000', 120, NULL, NULL);

INSERT INTO LOCAIS_VOTACAO (ID_LOCAL, NOME, ENDERECO, VAGAS, LATITUDE, LONGITUDE)
VALUES (11, 'Colegio Estadual Pinto de Aguiar', 'Rua Dr. Arthur Couto - Mussurunga I, Salvador - BA, 41490-350', 7, NULL, NULL);

INSERT INTO LOCAIS_VOTACAO (ID_LOCAL, NOME, ENDERECO, VAGAS, LATITUDE, LONGITUDE)
VALUES (12, 'Colegio Estadual Azevedo Fernandes', 'Largo do Pelourinho, 11 - Pelourinho, Salvador - BA', 29, NULL, NULL);

INSERT INTO LOCAIS_VOTACAO (ID_LOCAL, NOME, ENDERECO, VAGAS, LATITUDE, LONGITUDE)
VALUES (13, 'Escola Parque Salvador', 'Rua Saldanha Marinho, 138 - Liberdade, Salvador - BA, 40323-010', 11, NULL, NULL);

INSERT INTO LOCAIS_VOTACAO (ID_LOCAL, NOME, ENDERECO, VAGAS, LATITUDE, LONGITUDE)
VALUES (14, 'Colegio Estadual Goes Calmon', 'Avenida Dom Joao VI, 131 - Brotas, Salvador - BA', 74, NULL, NULL);

INSERT INTO LOCAIS_VOTACAO (ID_LOCAL, NOME, ENDERECO, VAGAS, LATITUDE, LONGITUDE)
VALUES (15, 'Colegio Salesiano do Salvador', 'Praca Conselheiro Almeida Couto, 400 - Saude, Salvador - BA, 40301-110', 45, NULL, NULL);

INSERT INTO LOCAIS_VOTACAO (ID_LOCAL, NOME, ENDERECO, VAGAS, LATITUDE, LONGITUDE)
VALUES (16, 'IFBA', 'Rua Emidio dos Santos, 285 - Barbalho, Salvador - BA, 40301-285', 189, NULL, NULL);

INSERT INTO LOCAIS_VOTACAO (ID_LOCAL, NOME, ENDERECO, VAGAS, LATITUDE, LONGITUDE)
VALUES (17, 'Escola Getulio Vargas', 'Praca do Barbalho, 70 - Barbalho, Salvador - BA, 40301-000', 41, NULL, NULL);

COMMIT;
</file>

<file path="src/app/components/login/login.component.css">
@charset "UTF-8";

@media only screen and (max-width: 480px) {
  body {
    font-size: 13px !important;
  }

  input[type="button"],
  input[type="submit"],
  input[type="reset"] {
    width: 70% !important;
    padding: 15px 60px !important;
  }

  .first img {
    width: 90%;
  }
}

.wrapper {
  display: flex;
  align-items: center;
  flex-direction: column;
  justify-content: center;
  width: 100%;
  min-height: 94%;
}

.first {
  background-color: #005e7a;
  padding: 5%;
}

.content {
  margin-top: 2.5rem;
}

#formContent {
  border-radius: 10px 10px 10px 10px;
  background: #fff;
  padding: 30px;
  width: 90%;
  max-width: 450px;
  position: relative;
  padding: 0px;
  box-shadow: 0 30px 60px 0 rgba(0, 0, 0, 0.3);
  text-align: center;
}

#formFooter {
  background-color: #f6f6f6;
  border-top: 1px solid #dce8f1;
  padding: 10px;
  text-align: center;
  border-radius: 0 0 10px 10px;
}

input[type="button"],
input[type="submit"],
input[type="reset"] {
  background-color: #005e7a;
  box-shadow: #005e7a 0px 10px 28px -12px;
  border: none;
  color: white;
  padding: 15px 80px;
  text-align: center;
  text-decoration: none;
  display: inline-block;
  text-transform: uppercase;
  font-size: 13px;
  border-radius: 5px 5px 5px 5px;
  margin: 15px 20px 20px 20px;
  transition: all 0.3s ease-in-out;
  width: 60%;
  margin-top: 2.5rem;
}

input[type="button"]:active,
input[type="submit"]:active,
input[type="reset"]:active,
button:active {
  transform: scale(0.95);
}

input[type="text"],
input[type="password"] {
  background-color: #f6f6f6;
  border: none;
  color: #0d0d0d;

  padding: 15px 32px;
  text-align: center;
  text-decoration: none;
  display: inline-block;
  font-size: 13px;
  margin: 5px;
  width: 70%;
  border: 2px solid #f6f6f6;
  transition: all 0.5s ease-in-out;
  border-radius: 5px 5px 5px 5px;
}

input[type="text"]:focus,
input[type="password"]:focus {
  border-bottom: 2px solid rgba(0, 82, 158, 0.8);
  border: none;
}

input[type="text"]:placeholder,
input[type="password"]:placeholder {
  color: #cccccc;
}

.dados-incorretos {
  margin-bottom: 0;
  color: red;
  margin-top: 0;
}

input[type="button"]:active,
input[type="submit"]:active,
input[type="reset"]:active,
button:active {
  transform: scale(0.95);
}

.text-success {
  color: green;
  font-size: 0.9rem;
  margin-top: 10px;
}

.loading {
  color: #005e7a;
  font-weight: bold;
  font-size: 0.9rem;
  margin-top: 10px;
}

input[type="submit"]:disabled {
  background-color: #cccccc;
  cursor: not-allowed;
  box-shadow: none;
  transform: none;
}

.logo {
  max-width: 95%;
  height: auto;
  display: inline;
  border-style: solid;
  border-color: #ffffff;
  border-top-left-radius: 0px;
  border-top-right-radius: 0px;
  border-bottom-right-radius: 0px;
  border-bottom-left-radius: 0px;
  border-top-width: 0px;
  border-right-width: 0px;
  border-bottom-width: 0px;
  border-left-width: 0px;
  box-shadow: 0px 0px 0px 0px #ffffff;
  opacity: 1;
  width: 40%;
  padding: 5px;
}
div.footer {
  width: 100%;
  display: table;
  text-align: center;
  font-size: 0.9rem;
  color: white;
  padding-top: 10px;
  background-image: url("/assets/images/bg-topo-principal.png");
  background-repeat: no-repeat;
  background-attachment: scroll;
  background-position: right top;
  padding-bottom: 10px;
}

div.footer img {
  height: 16px;
  display: block;
  margin-left: auto;
  margin-right: auto;
}
</file>

<file path="src/app/components/login/login.component.html">
<div class="wrapper">
  <div id="formContent">
    <div class="first">
      <img src="/assets/images/logo-tre-ba.png" alt="Logo TRE-BA" />
    </div>

    <div class="content">
      <form [formGroup]="form" (ngSubmit)="login()">
        <div id="recomenda-lv">
          <p>Recomenda Local de votação</p>
        </div>

        <!-- Campo de Usuário -->
        <div class="form-group">
          <input
            type="text"
            id="username"
            name="username"
            placeholder="Usuário"
            maxlength="30"
            formControlName="login"
            required
          />
          <div *ngIf="form.get('login').invalid && form.get('login').touched">
            <small class="text-danger">O campo Usuário é obrigatório.</small>
          </div>
        </div>

        <!-- Campo de Senha -->
        <div class="form-group">
          <input
            type="password"
            id="password"
            name="password"
            placeholder="Senha"
            maxlength="20"
            formControlName="password"
            required
          />
          <div
            *ngIf="form.get('password').invalid && form.get('password').touched"
          >
            <small class="text-danger">O campo Senha é obrigatório.</small>
          </div>
        </div>

        <!-- Botão de Login -->
        <input type="submit" name="login" value="Entrar" />

        <!-- Mensagem de Erro Global -->
        <div id="formFooter" *ngIf="error">
          <p class="dados-incorretos mt-0">{{ mensagem }}</p>
        </div>
      </form>
    </div>
  </div>
</div>

<div class="footer footer-bottom">
  <img src="/assets/images/brasao-tre-sem-fundo.png" alt="Brasão TRE-BA" />
  <div color="primary">
    Sistema Recomenda Local de votação - (Versão {{ version }})
  </div>
</div>
</file>

<file path="src/app/components/login/login.component.ts">
import { Component, OnDestroy, OnInit } from "@angular/core";
import { Router } from "@angular/router";
import {
  FormBuilder,
  FormControl,
  FormGroup,
  Validators,
} from "@angular/forms";
import { Usuario } from "../../model/usuario";
import { TokenStorageService } from "../../helpers/token-storage.service";
import { LoginService } from "../../service/login-service";
import { Subject, takeUntil } from "rxjs";

@Component({
  selector: "app-login",
  templateUrl: "./login.component.html",
  styleUrls: ["./login.component.css"],
})
export class LoginComponent implements OnInit, OnDestroy {
  version = "1.0.0";
  destroy$: Subject<boolean> = new Subject<boolean>();
  form: FormGroup;
  usuario = {} as Usuario;
  error: boolean = false;
  mensagem: string = "";

  constructor(
    private formBuilder: FormBuilder,
    private service: LoginService,
    private tokenService: TokenStorageService,
    private router: Router
  ) {}

  ngOnInit(): void {
    this.form = this.formBuilder.group({
      login: new FormControl(this.usuario.login, Validators.required),
      password: new FormControl(this.usuario.password, Validators.required),
    });
  }

  login() {
    if (this.form.valid) {
      const login = this.form.get("login").value;
      const password = this.form.get("password").value;

      this.usuario.login = login;
      this.usuario.password = password;

      // Enviar credenciais para o serviço de login
      this.service
        .postEntity(this.usuario)
        .pipe(takeUntil(this.destroy$))
        .subscribe({
          next: (data) => {
            this.error = false;

            // Salvar informações do usuário e token
            this.tokenService.saveUser(data);
            this.tokenService.saveToken(data.token);

            // Redirecionar para /send-pdf após login bem-sucedido
            this.router.navigate(["/busca-local-votacao"]);
          },
          error: (error) => {
            this.error = true;

            // Tratar erros específicos
            if (error.status === 504) {
              this.mensagem = "Sistema Indisponível";
            } else if (error.status === 401) {
              this.mensagem = "Usuário ou Senha incorretos.";
            } else if (error.error.errors && error.error.errors.length > 0) {
              this.mensagem = error.error.errors[0];
            } else {
              this.mensagem = "Erro inesperado.";
            }
          },
        });
    } else {
      this.error = true;
      this.mensagem = "Preencha todos os campos.";
    }
  }

  ngOnDestroy(): void {
    this.destroy$.next(true);
    this.destroy$.unsubscribe();
  }
}
</file>

<file path="src/app/components/modal-iniciar-automacao/modal-iniciar-automacao.component.css">
.modal-header {
    background-color: #005e7a;
    color: white;
  }
  
  .modal-body {
    font-size: 14px;
  }
  
  .modal-footer {
    justify-content: space-between;
  }
</file>

<file path="src/app/components/modal-iniciar-automacao/modal-iniciar-automacao.component.html">
<div class="modal-header">
    <h5 class="modal-title text-primary">Iniciar Automação</h5>
    <button type="button" class="btn-close" aria-label="Close" (click)="cancelar()"></button>
  </div>
  
  <div class="modal-body">
    <p><strong>Servidor Selecionado:</strong> {{ servidor?.nome }}</p>
  
    <div class="form-group">
      <label for="roboSelect">Escolha o robô:</label>
      <select class="form-control mt-2" id="roboSelect" [(ngModel)]="roboSelecionado">
        <option [ngValue]="null" disabled>-- Selecione --</option>
        <option *ngFor="let robo of robosDisponiveis" [ngValue]="robo">{{ robo.nome }}</option>
      </select>
    </div>
  
    <div class="mt-3" *ngIf="roboSelecionado">
      <h6><strong>Descrição do Robô:</strong></h6>
      <p class="text-muted">{{ roboSelecionado.descricao }}</p>
    </div>
  </div>
  
  <div class="modal-footer">
    <button type="button" class="btn btn-secondary" (click)="cancelar()">Cancelar</button>
    <button type="button" class="btn btn-primary" [disabled]="!roboSelecionado" (click)="confirmarAutomacao()">Confirmar</button>
  </div>
</file>

<file path="src/app/components/modal-iniciar-automacao/modal-iniciar-automacao.component.spec.ts">
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { ModalIniciarAutomacaoComponent } from './modal-iniciar-automacao.component';

describe('ModalIniciarAutomacaoComponent', () => {
  let component: ModalIniciarAutomacaoComponent;
  let fixture: ComponentFixture<ModalIniciarAutomacaoComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      declarations: [ModalIniciarAutomacaoComponent]
    });
    fixture = TestBed.createComponent(ModalIniciarAutomacaoComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
</file>

<file path="src/app/components/modal-iniciar-automacao/modal-iniciar-automacao.component.ts">
import { Component, Input } from '@angular/core';
import { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';

@Component({
  selector: 'app-modal-iniciar-automacao',
  templateUrl: './modal-iniciar-automacao.component.html',
  styleUrls: ['./modal-iniciar-automacao.component.css']
})
export class ModalIniciarAutomacaoComponent {
  @Input() servidor: any;

  robosDisponiveis = [
    { nome: 'Robô Sentença Final', codigo: 'sentenca_final', descricao: 'Lança movimentação 874 após validar minuta e documentos obrigatórios.' },
    { nome: 'Robô Intimação', codigo: 'intimacao', descricao: 'Gera e envia intimação para as partes via PJe ou e-mail.' },
    { nome: 'Robô Cálculo Multa', codigo: 'multa', descricao: 'Calcula multa com base nos dados processuais e lança valor.' }
  ];

  roboSelecionado: any = null;

  constructor(public activeModal: NgbActiveModal) {}

  confirmarAutomacao() {
    if (this.roboSelecionado) {
      console.log('Lançar automação', {
        servidor: this.servidor.nome,
        robo: this.roboSelecionado
      });
      this.activeModal.close(this.roboSelecionado);
    }
  }

  cancelar() {
    this.activeModal.dismiss();
  }
}
</file>

<file path="src/app/components/page-not-found/page-not-found.component.css">
.altura-pagina {
    min-height:calc(90vh - 40px);
}

.margin-negativa-5 {
    margin-left: -5%;
}
</file>

<file path="src/app/components/page-not-found/page-not-found.component.html">
<app-header></app-header>
<div class="altura-home text-center pt-4">
    <img class="mt-4 margin-negativa-5" src="/assets/images/brasao-tre-sem-fundo.png" />
    <h1 class="text-center pt-4">Página não encontrada.</h1>
</div>
<app-footer></app-footer>
</file>

<file path="src/app/components/page-not-found/page-not-found.component.ts">
import { Component } from '@angular/core';

@Component({
  selector: 'app-page-not-found',
  templateUrl: './page-not-found.component.html',
  styleUrls: ['./page-not-found.component.css']
})
export class PageNotFoundComponent {

}
</file>

<file path="src/app/components/painel-servidor/painel-servidor.component.css">
.container {
    max-width: 960px;
  }
</file>

<file path="src/app/components/painel-servidor/painel-servidor.component.html">
<app-header></app-header>

<!-- Container principal -->
<div class="container mt-4">

  <!-- Cabeçalho com título e botão -->
  <div class="d-flex justify-content-between align-items-center">
    <h4 class="text-primary mb-0">Painel do {{ nomeServidor }}</h4>
    <button class="btn btn-outline-primary btn-sm" routerLink="/automacoes">
      <i class="bi bi-arrow-left-circle me-1"></i> Voltar
    </button>
  </div>
  <hr />

  <!-- Fila de automações -->
  <h5 class="text-success">Fila de Automações</h5>
  <ul class="list-group mb-4">
    <li *ngFor="let item of fila" class="list-group-item d-flex justify-content-between align-items-center">
      {{ item.robo }}
      <span class="badge bg-secondary">{{ item.status }}</span>
    </li>
  </ul>

  <!-- Logs em tempo real -->
  <h5 class="text-info">Logs em Tempo Real</h5>
  <div class="bg-light p-3 border rounded mb-4" style="height: 200px; overflow-y: auto;">
    <div *ngFor="let log of logsAtivos">{{ log }}</div>
  </div>

  <!-- Histórico -->
  <h5 class="text-dark">Histórico de Automações</h5>
  <table class="table table-bordered table-hover">
    <thead class="table-primary">
      <tr>
        <th>Robô</th>
        <th>Status</th>
        <th>Data</th>
        <th>Logs</th>
      </tr>
    </thead>
    <tbody>
      <tr *ngFor="let item of historico">
        <td>{{ item.robo }}</td>
        <td>
          <span [ngClass]="{
            'text-success': item.status === 'Concluído',
            'text-danger': item.status === 'Erro'
          }">
            {{ item.status }}
          </span>
        </td>
        <td class="text-center">{{ item.data }}</td>
        <td class="text-center">
            <button class="btn btn-outline-primary btn-sm" (click)="baixarLogs(item.logs)">
              ⬇ Baixar Logs
            </button>
          </td>       
      </tr>
    </tbody>
  </table>

</div> <!-- Fim do container -->

<app-footer></app-footer>
</file>

<file path="src/app/components/painel-servidor/painel-servidor.component.spec.ts">
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { PainelServidorComponent } from './painel-servidor.component';

describe('PainelServidorComponent', () => {
  let component: PainelServidorComponent;
  let fixture: ComponentFixture<PainelServidorComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      declarations: [PainelServidorComponent]
    });
    fixture = TestBed.createComponent(PainelServidorComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
</file>

<file path="src/app/components/painel-servidor/painel-servidor.component.ts">
import { Component, OnInit } from '@angular/core';
import { ActivatedRoute } from '@angular/router';

@Component({
  selector: 'app-painel-servidor',
  templateUrl: './painel-servidor.component.html',
  styleUrls: ['./painel-servidor.component.css']
})
export class PainelServidorComponent implements OnInit {
  nomeServidor: string = '';
  fila: any[] = [];
  historico: any[] = [];
  logsAtivos: string[] = [];

  constructor(private route: ActivatedRoute) {}

  ngOnInit(): void {
    this.nomeServidor = this.route.snapshot.paramMap.get('nome') || 'Servidor Desconhecido';

    // Mock de fila
    this.fila = [
      { robo: 'Robô Sentença Final', status: 'Em execução' },
      { robo: 'Robô Intimação', status: 'Aguardando' }
    ];

    // Mock de histórico
    this.historico = [
      {
        robo: 'Robô Sentença Final',
        status: 'Concluído',
        data: '23/06/2025 09:10',
        logs: ['[INFO] Execução iniciada', '[INFO] Requisição HTTP enviada', '[INFO] Sucesso']
      },
      {
        robo: 'Robô Cálculo Multa',
        status: 'Erro',
        data: '23/06/2025 08:45',
        logs: ['[INFO] Execução iniciada', '[ERROR] Timeout HTTP', '[INFO] Iniciado fallback', '[ERROR] Falha ao autenticar no PJe']
      }
    ];

    // Simulação de logs ativos
    setInterval(() => {
      if (this.fila.length > 0 && this.fila[0].status === 'Em execução') {
        this.logsAtivos.push(`[LOG][${new Date().toLocaleTimeString()}] Robô executando...`);
      }
    }, 3000);
  }

  baixarLogs(logs: string[]) {
    const blob = new Blob([logs.join('\n')], { type: 'text/plain;charset=utf-8' });
    const url = window.URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = 'logs-automacao.txt';
    link.click();
    window.URL.revokeObjectURL(url);
  }
}
</file>

<file path="src/app/components/send-pdf/send-pdf.component.css">
@charset "UTF-8";

@media only screen and (max-width: 480px) {
  body {
    font-size: 13px !important;
  }

  input[type="button"],
  input[type="submit"],
  input[type="reset"] {
    width: 70% !important;
    padding: 15px 60px !important;
  }

  .first img {
    width: 90%;
  }
}

.wrapper {
  display: flex;
  align-items: center;
  flex-direction: column;
  justify-content: center;
  width: 100%;
  min-height: 94%;
}

.first {
  background-color: #005e7a;
  padding: 5%;
}

.content {
  margin-top: 2.5rem;
}

#formContent {
  border-radius: 10px 10px 10px 10px;
  background: #fff;
  padding: 30px;
  width: 90%;
  max-width: 450px;
  position: relative;
  padding: 0px;
  box-shadow: 0 30px 60px 0 rgba(0, 0, 0, 0.3);
  text-align: center;
}

#formFooter {
  background-color: #f6f6f6;
  border-top: 1px solid #dce8f1;
  padding: 10px;
  text-align: center;
  border-radius: 0 0 10px 10px;
}

input[type="button"],
input[type="submit"],
input[type="reset"] {
  background-color: #005e7a;
  box-shadow: #005e7a 0px 10px 28px -12px;
  border: none;
  color: white;
  padding: 15px 80px;
  text-align: center;
  text-transform: uppercase;
  font-size: 13px;
  border-radius: 5px;
  margin: 15px 20px 20px 20px;
  transition: all 0.3s ease-in-out;
  width: 60%;
  margin-top: 2.5rem;
}

input[type="button"]:active,
input[type="submit"]:active,
input[type="reset"]:active,
button:active {
  transform: scale(0.95);
}

input[type="text"],
input[type="file"],
input[type="tel"] {
  background-color: #f6f6f6;
  border: none;
  color: #0d0d0d;
  padding: 15px 32px;
  text-align: center;
  font-size: 13px;
  margin: 5px;
  width: 70%;
  border: 2px solid #f6f6f6;
  transition: all 0.5s ease-in-out;
  border-radius: 5px;
}

input[type="text"]:focus,
input[type="file"]:focus,
input[type="tel"]:focus {
  border: 2px solid rgba(0, 82, 158, 0.8);
}

input[type="text"]:placeholder,
input[type="file"]:placeholder,
input[type="tel"]:placeholder {
  color: #cccccc;
}

.dados-incorretos {
  margin: 10px 0;
  color: red;
  font-size: 0.9rem;
}

.logo {
  max-width: 95%;
  height: auto;
  display: inline;
}

div.footer {
  width: 100%;
  text-align: center;
  font-size: 0.9rem;
  color: white;
  padding: 10px 0;
  background-image: url("/assets/images/bg-topo-principal.png");
  background-repeat: no-repeat;
  background-position: right top;
}

div.footer img {
  height: 16px;
  display: block;
  margin: 0 auto;
}
</file>

<file path="src/app/components/send-pdf/send-pdf.component.html">
<div class="wrapper">
  <div id="formContent">
    <div class="first">
      <img src="/assets/images/logo-tre-ba.png" alt="Logo TRE-BA" />
    </div>

    <div class="content">
      <form (ngSubmit)="onSubmit()">
        <div id="nomeSistema">
          <p>API para Envio de PDF</p>
        </div>

        <!-- Campo de Nome -->
        <div class="form-group">
          <input
            type="text"
            id="name"
            name="name"
            placeholder="Nome"
            maxlength="50"
            [(ngModel)]="formData.name"
            #nameInput="ngModel"
            required
          />
          <div *ngIf="nameInput.invalid && nameInput.touched">
            <small class="text-danger">O campo Nome é obrigatório.</small>
          </div>
        </div>

        <!-- Campo de Telefone -->
        <div class="form-group">
          <input
            type="tel"
            id="phone"
            name="phone"
            placeholder="Telefone"
            maxlength="15"
            [(ngModel)]="formData.phone"
            #phoneInput="ngModel"
            required
          />
          <div *ngIf="phoneInput.invalid && phoneInput.touched">
            <small class="text-danger">O campo Telefone é obrigatório.</small>
          </div>
        </div>

        <!-- Campo de Arquivo -->
        <div class="form-group">
          <input
            type="file"
            id="file"
            name="file"
            (change)="onFileSelected($event)"
            accept=".pdf"
            required
          />
          <div *ngIf="!formData.file && fileTouched">
            <small class="text-danger">O campo Arquivo é obrigatório.</small>
          </div>
        </div>

        <!-- Botão de Envio -->
        <input
          type="submit"
          value="Enviar"
          [disabled]="
            !formData.name || !formData.phone || !formData.file || isLoading
          "
        />

        <!-- Feedback -->
        <div *ngIf="successMessage" class="text-success">
          {{ successMessage }}
        </div>
        <div *ngIf="errorMessage" class="text-danger">{{ errorMessage }}</div>
        <div *ngIf="isLoading" class="loading">Enviando...</div>
      </form>
    </div>
  </div>
</div>

<div class="footer footer-bottom">
  <img src="/assets/images/brasao-tre-sem-fundo.png" alt="Brasão TRE-BA" />
  <div color="primary">
    Sistema de envio de PDF por API - (Versão {{ version }})
  </div>
</div>
</file>

<file path="src/app/components/send-pdf/send-pdf.component.spec.ts">
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { SendPdfComponent } from './send-pdf.component';

describe('SendPdfComponent', () => {
  let component: SendPdfComponent;
  let fixture: ComponentFixture<SendPdfComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      declarations: [SendPdfComponent]
    });
    fixture = TestBed.createComponent(SendPdfComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
</file>

<file path="src/app/components/send-pdf/send-pdf.component.ts">
import { Component } from "@angular/core";
import { HttpClient } from "@angular/common/http";

@Component({
  selector: "app-send-pdf",
  templateUrl: "./send-pdf.component.html",
  styleUrls: ["./send-pdf.component.css"],
})
export class SendPdfComponent {
  version: string = "1.0.0";

  // Estrutura dos dados do formulário
  formData: { name: string; phone: string; file: File | null } = {
    name: "",
    phone: "",
    file: null,
  };

  // Estados adicionais
  fileTouched: boolean = false; // Controle se o campo de arquivo foi tocado
  isLoading: boolean = false; // Indicador de carregamento
  successMessage: string = ""; // Mensagem de sucesso
  errorMessage: string = ""; // Mensagem de erro

  constructor(private http: HttpClient) {}

  /**
   * Método para tratar a seleção de arquivo.
   * @param event Evento disparado no input de arquivo.
   */
  onFileSelected(event: any) {
    const selectedFile = event.target.files[0];

    if (selectedFile && selectedFile.type === "application/pdf") {
      this.formData.file = selectedFile;
      this.fileTouched = true; // Define que o campo foi tocado
      this.errorMessage = ""; // Limpa mensagem de erro
    } else {
      this.formData.file = null;
      this.fileTouched = true;
      this.errorMessage = "Apenas arquivos PDF são permitidos.";
    }
  }

  /**
   * Método para enviar o formulário.
   */
  onSubmit() {
    this.successMessage = "";
    this.errorMessage = "";

    // Validação dos campos
    if (!this.formData.name || !this.formData.phone || !this.formData.file) {
      this.errorMessage = "Todos os campos são obrigatórios.";
      this.fileTouched = true;
      return;
    }

    const formDataToSend = new FormData();
    formDataToSend.append("file", this.formData.file!);
    formDataToSend.append("name", this.formData.name);
    formDataToSend.append("phone", this.formData.phone);

    this.isLoading = true; // Exibe carregamento

    // Chamada HTTP para envio do PDF
    this.http
      .post("http://localhost:8080/api/send-pdf", formDataToSend)
      .subscribe({
        next: (response) => {
          this.isLoading = false;
          this.successMessage = "PDF enviado com sucesso!";
          this.clearForm(); 
        },
        error: (error) => {
          this.isLoading = false;
          this.errorMessage = "Erro ao enviar PDF. Tente novamente.";
        },
      });
  }

  /**
   * Método para limpar o formulário após envio bem-sucedido.
   */
  clearForm() {
    this.formData = {
      name: "",
      phone: "",
      file: null,
    };
    this.fileTouched = false;
  }
}
</file>

<file path="src/app/components/toast/toast.component.css">
.success {
    background-color: #198754;
  }
  
  .info {
    background-color: #0d6efd;
  }
  
  .warning {
    background-color: #ffc107;
  }
  
  .error {
    background-color: #dc3545;
  }
</file>

<file path="src/app/components/toast/toast.component.html">
<div
  #toastElement
  class="toast fade toast-width mt-2"
  [ngClass]="type"
  role="alert"
  aria-live="assertive"
  aria-atomic="true"
>
  <div class="toast-header text-center">
    <strong class="me-auto">{{ title }}</strong>
    <button type="button" class="btn-close" aria-label="Close" (click)="hide()"></button>
  </div>
  <div class="toast-body text-white font-weight-600">{{ message }}</div>
</div>
</file>

<file path="src/app/components/toast/toast.component.ts">
import { Component, ElementRef, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { Toast } from 'bootstrap';
import { EventTypes } from 'src/app/enums/event-types';
import { fromEvent, take } from 'rxjs';

@Component({
  selector: 'app-toast',
  templateUrl: './toast.component.html',
  styleUrls: ['./toast.component.css']
})
export class ToastComponent {
  @Output() disposeEvent = new EventEmitter();

  @ViewChild('toastElement', { static: true })
  toastEl!: ElementRef;

  @Input()
  type!: EventTypes;

  @Input()
  title!: string;

  @Input()
  message!: string;

  toast!: Toast;

  ngOnInit() {
    this.show();
  }

  show() {
    this.toast = new Toast(
      this.toastEl.nativeElement,
      this.type === EventTypes.Error
        ? {
            autohide: true,
          }
        : {
            delay: 3000,
          }
    );

  fromEvent(this.toastEl.nativeElement, 'hidden.bs.toast')
      .pipe(take(1))
      .subscribe(() => this.hide());

    this.toast.show();
  }

  hide() {
    this.toast.dispose();
    this.disposeEvent.emit();
  }
}
</file>

<file path="src/app/components/toaster/toaster.component.css">
.toaster {
    z-index: 2000;
  }
</file>

<file path="src/app/components/toaster/toaster.component.html">
<div class="toaster position-fixed top-0 end-0 px-3 py-2 m-16">
    <div *ngFor="let toast of currentToasts; index as i">
      <app-toast
        [type]="toast.type"
        [title]="toast.title"
        [message]="toast.message"
        (disposeEvent)="dispose(i)"
      ></app-toast>
    </div>
  </div>
</file>

<file path="src/app/components/toaster/toaster.component.ts">
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy } from '@angular/core';
import { Subject, takeUntil } from 'rxjs';
import { ToastEvent } from 'src/app/model/toast-event';
import { ToastService } from 'src/app/service/toast-service';

@Component({
  selector: 'app-toaster',
  templateUrl: './toaster.component.html',
  styleUrls: ['./toaster.component.css'],
  changeDetection: ChangeDetectionStrategy.OnPush,
})
export class ToasterComponent implements OnDestroy {

  destroy$: Subject<boolean> = new Subject<boolean>();
  currentToasts: ToastEvent[] = [];

  constructor(private toastService: ToastService, private cdr: ChangeDetectorRef) {}

  ngOnInit() {
    this.subscribeToToasts();
  }

  subscribeToToasts() {
    this.toastService.toastEvents
      .pipe(takeUntil(this.destroy$)) 
      .subscribe((toasts) => {
        const currentToast: ToastEvent = {
          type: toasts.type,
          title: toasts.title,
          message: toasts.message,
      };
      this.currentToasts.push(currentToast);
      this.cdr.detectChanges();
    });
  }

  dispose(index: number) {
    this.currentToasts.splice(index, 1);
    this.cdr.detectChanges();
  }

  ngOnDestroy(): void {    
    this.destroy$.next(true);
    this.destroy$.unsubscribe();
  }
}
</file>

<file path="src/app/constants/app-constants.ts">
export abstract class AppConstants {     
     static readonly HOME_PATH = "/home";
     static readonly SERVIDOR_PATH = "/servidores";     
     static readonly AUTH_PATH = "/auth/signin";
     static readonly CRACHA_PATH = "/crachas";
     static readonly CRACHA_LIST_PATH = "/crachas-list";
     static readonly LOGIN_PATH = "/login";     
     static readonly TOKEN_KEY = "auth-token";
     static readonly USER_KEY = "auth-user";     
}
</file>

<file path="src/app/directives/back-button.directive.ts">
import { Location } from '@angular/common';
import { Directive, HostListener } from '@angular/core';

@Directive({
  selector: '[back-button]'
})
export class BackButtonDirective {

  constructor(private _location: Location) { }

  @HostListener('click')
  onClick() {              
      this._location.back();
  }

}
</file>

<file path="src/app/enums/event-types.ts">
export enum EventTypes {
    Success = 'success',
    Info = 'info',
    Warning = 'warning',
    Error = 'error',
  }
</file>

<file path="src/app/helpers/app-utils.ts">
import { FormArray, FormGroup } from "@angular/forms";

export default class AppUtils {
    
  public static findInvalidControlsRecursive(formToInvestigate:FormGroup|FormArray) {
    let recursiveFunc = (form:FormGroup|FormArray) => {
      Object.keys(form.controls).forEach(field => { 
        const control = form.get(field);
        if (control?.invalid) {
          console.log(control.errors);
          control.markAsTouched();
        }

        if (control instanceof FormGroup) {
          recursiveFunc(control);
        } else if (control instanceof FormArray) {
          recursiveFunc(control);
        }        
      });
    }
    recursiveFunc(formToInvestigate);
  }
}
</file>

<file path="src/app/helpers/auth.interceptor.ts">
import { HttpErrorResponse, HttpEvent, HttpEventType, HttpHandler, HttpInterceptor, HttpRequest, HttpResponse } from "@angular/common/http";
import { Observable } from "rxjs";
import { tap } from "rxjs/operators";
import { TokenStorageService } from "./token-storage.service";
import { Injectable } from "@angular/core";
import { Router } from "@angular/router";
import { AppConstants } from "../constants/app-constants";

const TOKEN_HEADER_KEY = 'Authorization';

@Injectable()
export class AuthInterceptor implements HttpInterceptor {

    constructor(private tokenService: TokenStorageService,
        private router: Router) {}

    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {
        let authReq = req;
        const token = this.tokenService.getToken();

        if (token != null) {
            authReq = req.clone({headers: req.headers.set(TOKEN_HEADER_KEY, 'Bearer ' + token)});
        }
        return next.handle(authReq).pipe(
          tap({
            error: error => 
            { 
                if (error.status === 401) {
                    this.router.navigate([AppConstants.LOGIN_PATH]);
                }
            }            
          }));
    }  
}
</file>

<file path="src/app/helpers/pipes/sim-nao.pipe.ts">
import { Pipe, PipeTransform } from '@angular/core';

@Pipe({
  name: 'simNao'
})
export class SimNaoPipe implements PipeTransform {

  transform(value: unknown, ...args: unknown[]): unknown {
    return value ? "Sim" : "Não";
  }

}
</file>

<file path="src/app/helpers/token-storage.service.ts">
import { Injectable } from "@angular/core";
import { AppConstants } from "../constants/app-constants";
import { Usuario } from "../model/usuario";


@Injectable({
    providedIn: 'root'
})
export class TokenStorageService {

    signOut() {
        window.sessionStorage.clear();
    }

    saveToken(token: string) {
        window.sessionStorage.removeItem(AppConstants.TOKEN_KEY);
        window.sessionStorage.setItem(AppConstants.TOKEN_KEY, token);
    }

    getToken(): string {
        return sessionStorage.getItem(AppConstants.TOKEN_KEY);
    }

    saveUser(user) {
        window.sessionStorage.removeItem(AppConstants.USER_KEY);
        window.sessionStorage.setItem(AppConstants.USER_KEY, JSON.stringify(user));
    }

    getUser(): Usuario {
        return JSON.parse(sessionStorage.getItem(AppConstants.USER_KEY));
    }
}
</file>

<file path="src/app/model/campos-pesquisa.ts">
export interface CamposPesquisa {
    id:    number;
    campo: string;
    nome:  string;
}
</file>

<file path="src/app/model/cracha.ts">
export interface Cracha {
    id       : string;
    matricula: string;
    cargo: string;
    nomeCracha: string;
    nomeCompleto: string;
    dataSolicitacao: Date;
    dataEntrega: Date;
	dataimpressao: Date;
	titulo: string;
    foto: Blob;
}
</file>

<file path="src/app/model/pagination/content.ts">
export interface Content {
    matricula: string
    cargo: any
    nomeCracha: string
    nomeCompleto: string
    titulo: string
    foto: string
  }
</file>

<file path="src/app/model/pagination/page-root.ts">
import { Content } from './content';
import { Pageable } from './pageable';
import { RootSort } from './root-sort';

export interface PageRoot {
  content: Content[]
  pageable: Pageable
  last: boolean
  totalElements: number
  totalPages: number
  size: number
  number: number
  sort: RootSort
  first: boolean
  numberOfElements: number
  empty: boolean
}
</file>

<file path="src/app/model/pagination/pageable-sort.ts">
export interface PageableSort {
    empty: boolean
    sorted: boolean
    unsorted: boolean
  }
</file>

<file path="src/app/model/pagination/pageable.ts">
import { Sort } from './sort';

export interface Pageable {
  sort: Sort
  offset: number
  pageNumber: number
  pageSize: number
  paged: boolean
  unpaged: boolean
}
</file>

<file path="src/app/model/pagination/root-sort.ts">
export interface RootSort {
    empty: boolean
    sorted: boolean
    unsorted: boolean
  }
</file>

<file path="src/app/model/pagination/sort.ts">
export interface Sort {
    empty: boolean
    sorted: boolean
    unsorted: boolean
  }
</file>

<file path="src/app/model/toast-event.ts">
import { EventTypes } from "../enums/event-types";

export interface ToastEvent {
    type: EventTypes;
    title: string;
    message: string;
  }
</file>

<file path="src/app/model/usuario.ts">
export interface Usuario {
    login: string;
    password: string;
    roles: String[];
    token: string;
    nomeCompleto: string;
    email: string;
   // secont: boolean;
   comissao: boolean;
}
</file>

<file path="src/app/service/base-service.ts">
import { HttpClient } from "@angular/common/http";
import { Observable } from 'rxjs';
import { Injectable } from '@angular/core';
import { environment } from '../../environments/environment';

const SEPARADOR = "/";

@Injectable({
    providedIn: 'root'
})
export abstract class BaseService<T> {

    basePath = environment.apiUrl;

    constructor(private path: string, 
        private http: HttpClient) {
            this.path = this.basePath + this.path;
        }

    getEntity(id: string) : Observable<T> {
        return this.http.get<T>(this.path + SEPARADOR + id);
    }

    getAllEntities() : Observable<T[]> {
        return this.http.get<T[]>(this.path);
    }

    postEntity(entity: T) : Observable<T> {
        return this.http.post<T>(this.path, entity);
    }

    deleteEntity(id: string) : Observable<T> {
        return this.http.delete<T>(this.path + SEPARADOR + id);
    }
}
</file>

<file path="src/app/service/confirmation-dialog-service.ts">
import { NgbModal } from "@ng-bootstrap/ng-bootstrap";
import { Injectable } from "@angular/core";
import { ConfirmationDialogComponent } from "../components/confirmation-dialog/confirmation-dialog.component";

@Injectable()
export class ConfirmationDialogService {

  constructor(private modalService: NgbModal) { }

  public confirm(
    title: string,
    message: string,
    btnOkText: string = 'OK',
    btnCancelText: string = 'Cancelar',
    dialogSize: 'sm'|'lg' = 'sm'): Promise<boolean> {
    const modalRef = this.modalService.open(ConfirmationDialogComponent, { size: dialogSize });
    modalRef.componentInstance.title = title;
    modalRef.componentInstance.message = message;
    modalRef.componentInstance.btnOkText = btnOkText;
    modalRef.componentInstance.btnCancelText = btnCancelText;

    return modalRef.result;
  }

}
</file>

<file path="src/app/service/dropdown.service.spec.ts">
import { TestBed } from '@angular/core/testing';

import { DropdownService } from './dropdown.service';

describe('DropdownService', () => {
  let service: DropdownService;

  beforeEach(() => {
    TestBed.configureTestingModule({});
    service = TestBed.inject(DropdownService);
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });
});
</file>

<file path="src/app/service/dropdown.service.ts">
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { CamposPesquisa } from '../model/campos-pesquisa';

@Injectable({
  providedIn: 'root'
})
export class DropdownService {

  constructor(private http: HttpClient) {}

  getCamposPequisa() {
    return this.http.get<CamposPesquisa[]>('assets/json/campos-pesquisa.json');
  }
}
</file>

<file path="src/app/service/local-votacao.service.ts">
import { Injectable } from '@angular/core';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { Observable, throwError } from 'rxjs';
import { catchError } from 'rxjs/operators';

@Injectable({
  providedIn: 'root'
})
export class LocalVotacaoService {
  private apiUrl = 'http://localhost:8081/api/locations';

  constructor(private http: HttpClient) {}

  validateCep(cep: string): boolean {
    return /^[0-9]{5}-?[0-9]{3}$/.test(cep);
  }

  getVotingLocationsFiltered(lat: number, lon: number, zona: number|null, limite: number = 5) {
    let url = `${this.apiUrl}/proximos?lat=${lat}&lon=${lon}&limite=${limite}`;
    if (zona !== null && !isNaN(zona)) {
      url += `&zona=${zona}`;
    }

    console.log('Realizando requisição para:', url);

    return this.http.get(url).pipe(
      catchError(this.handleError)
    );
  }

  getZonaByBairro(bairro: string) {
    const url = `${this.apiUrl}/zona?bairro=${encodeURIComponent(bairro)}`;
    return this.http.get<number>(url).pipe(
      catchError(this.handleError)
    );
  }

  /**
   * Obter estatísticas de geocodificação por zona eleitoral
   */
  getEstatisticasPorZona() {
    const url = `${this.apiUrl}/estatisticas/zona`;
    return this.http.get<any[]>(url).pipe(
      catchError(this.handleError)
    );
  }

  /**
   * Obter estatísticas de geocodificação por município
   */
  getEstatisticasPorMunicipio() {
    const url = `${this.apiUrl}/estatisticas/municipio`;
    return this.http.get<any[]>(url).pipe(
      catchError(this.handleError)
    );
  }

  /**
   * Obter locais de votação sem coordenadas geográficas
   */
  getLocaisSemCoordenadas() {
    const url = `${this.apiUrl}/sem-coordenadas`;
    return this.http.get<any[]>(url).pipe(
      catchError(this.handleError)
    );
  }

  /**
   * Iniciar geocodificação em massa de todos os locais sem coordenadas
   */
  iniciarGeocodificacaoEmMassa() {
    const url = `${this.apiUrl}/geocodificar-todos`;
    return this.http.post<any>(url, {}).pipe(
      catchError(this.handleError)
    );
  }

  private handleError(error: HttpErrorResponse): Observable<never> {
    let errorMessage = 'Erro desconhecido.';
    if (error.error instanceof ErrorEvent) {
      errorMessage = `Erro: ${error.error.message}`;
    } else {
      errorMessage = `Erro no servidor: ${error.status}, mensagem: ${error.message}`;
    }
    console.error(errorMessage);
    return throwError(errorMessage);
  }
}
</file>

<file path="src/app/service/login-service.ts">
import { HttpClient } from "@angular/common/http";
import { Usuario } from '../model/usuario';
import { BaseService } from "./base-service";
import { Injectable } from '@angular/core';
import { AppConstants } from "../constants/app-constants";

@Injectable({
    providedIn: 'root'
})
export class LoginService extends BaseService<Usuario> {

    constructor(protected httpClient: HttpClient) {
        super(AppConstants.AUTH_PATH, httpClient);
    }
}
</file>

<file path="src/app/service/LogService.java">
package br.jus.treba.aplicacao.service;

import br.jus.treba.aplicacao.model.Log;
import br.jus.treba.aplicacao.repository.LogRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class LogService {

    @Autowired
    private LogRepository logRepository;

    public Log salvarLog(Log log) {
        return logRepository.save(log);
    }
}
</file>

<file path="src/app/service/mostra-imagem.service.spec.ts">
import { TestBed } from '@angular/core/testing';

import { MostraImagemService } from './mostra-imagem.service';

describe('MostraImagemService', () => {
  let service: MostraImagemService;

  beforeEach(() => {
    TestBed.configureTestingModule({});
    service = TestBed.inject(MostraImagemService);
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });
});
</file>

<file path="src/app/service/mostra-imagem.service.ts">
import { Injectable } from '@angular/core';
import { DomSanitizer, SafeUrl } from '@angular/platform-browser';



@Injectable({
  providedIn: 'root',
})
export class MostraImagemService {
  constructor(private sanitizer: DomSanitizer) {}

  convertBytesToSafeUrl(foto: any): SafeUrl {
    if (foto != null) {
      const base64Image = btoa(String.fromCharCode(...new Uint8Array(foto)));
      const imageUrl = `data:image/jpeg;base64,${base64Image}`;
      return this.sanitizer.bypassSecurityTrustUrl(imageUrl);
    }
    return null;
  }
}
</file>

<file path="src/app/service/servidor.service.ts">
import { HttpClient, HttpParams } from "@angular/common/http";
import { Observable } from 'rxjs';
import { Servidor } from "../model/servidor";
import { BaseService } from "./base-service";
import { Injectable } from "@angular/core";
import { AppConstants } from "../constants/app-constants";
import { PageRoot } from '../model/pagination/page-root';
import { environment } from '../../environments/environment';
import { IfStmt } from "@angular/compiler";

const SEPARADOR = "/";

@Injectable({
  providedIn: 'root'
})
export class ServidorService extends BaseService<Servidor> {

  override basePath = environment.apiUrl;

  constructor(protected httpClient: HttpClient) {
    super(AppConstants.SERVIDOR_PATH, httpClient);
  }
  //getEntitiesPaginadas(page: number, size: number): Observable<Page<Servidor>> {
  getEntitiesPaginadas(page: number, size: number, filtro: string): Observable<PageRoot> {

    const params = new HttpParams()
      .set('page', page)
      .set('size', size)
      .set('titulo',filtro);

      

    console.log(this.basePath + AppConstants.SERVIDOR_PATH);
    return this.httpClient.get<PageRoot>(this.basePath + AppConstants.SERVIDOR_PATH, { params });

  }
}
</file>

<file path="src/app/service/toast-service.ts">
import { Injectable } from "@angular/core";
import { Observable, Subject } from "rxjs";
import { EventTypes } from "../enums/event-types";
import { ToastEvent } from "../model/toast-event";

@Injectable({
    providedIn: 'root',
  })
  export class ToastService {
    toastEvents: Observable<ToastEvent>;
    private _toastEvents = new Subject<ToastEvent>();
  
    constructor() {
      this.toastEvents = this._toastEvents.asObservable();
    }
  
    showSuccessToast(title: string, message: string) {
      this._toastEvents.next({
        message,
        title,
        type: EventTypes.Success,
      });
    }

    /**
   * Show info toast notification.
   * @param title Toast title
   * @param message Toast message
   */
  showInfoToast(title: string, message: string) {
    this._toastEvents.next({
      message,
      title,
      type: EventTypes.Info,
    });
  }

  /**
   * Show warning toast notification.
   * @param title Toast title
   * @param message Toast message
   */
  showWarningToast(title: string, message: string) {
    this._toastEvents.next({
      message,
      title,
      type: EventTypes.Warning,
    });
  }

  /**
   * Show error toast notification.
   * @param title Toast title
   * @param message Toast message
   */
  showErrorToast(title: string, message: string) {
    this._toastEvents.next({
      message,
      title,
      type: EventTypes.Error,
    });
  }
  }
</file>

<file path="src/assets/json/campos-pesquisa.json">
[
   { "id": "1", "campo": "matricula", "nome": "Matrícula" },
   { "id": "2", "campo": "nomeCompleto", "nome": "Nome Completo" },
   { "id": "3", "campo": "titulo", "nome": "Título eleitoral" }
]
</file>

<file path="src/environments/environment.development.ts">
export const environment = {
    production: false,
    apiUrl: 'http://localhost:8081'
};
</file>

<file path="src/environments/environment.ts">
export const environment = {
  production: false,
  apiUrl: "http://localhost:8081",
};
</file>

<file path="src/index.html">
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <title>Recomenda Local de Votação</title>
    <base href="/" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link rel="icon" type="image/x-icon" href="/assets/images/brasao-tre-sem-fundo.png" />
    <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDErM19QviAyqxchLWqV6MLLh6N8nknBr8&libraries=geometry"></script>
  </head>
  <body>
    <app-root></app-root>
  </body>
</html>
</file>

<file path="src/main.ts">
/// <reference types="@angular/localize" />

import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';

import { AppModule } from './app/app.module';


platformBrowserDynamic().bootstrapModule(AppModule)
  .catch(err => console.error(err));
</file>

<file path="src/styles.css">
@import "~bootstrap/dist/css/bootstrap.css" ;

/* You can add global styles to this file, and also import other style files */
@media only screen and (max-width: 600px) {
    .col-1, .col-2, .col-3, .col-4, .col-5, .col-6, .col-7, .col-8, .col-9, .col-10, .col-11, .col-12 {
        margin-top: 0.25rem !important;
        width: 100%;
    }

    .row {
      margin-top: 0rem !important;
    }

    #labelAcessoRede, #checkAcessoRede {
        float: left !important;
    }

    html, body {
      font-size: 13px !important;      
    }
    
  }

html, body {
  background-image: url('/assets/images/brasao-azul-trans-4p.png');
  background-repeat: repeat;
  height: 100vh;
}

table thead {
  background-color: #005E7A !important;
  text-align: center;
  color: white;
}

textarea {
  resize: none;
}

.container {
  min-height:calc(90vh - 48px);
}

.alert-danger {
  background-color: #f8d7da;
  padding-left: 0.5rem;
}

.float-right {
  float: right !important;
}

.ml-2 {
  margin-left: 1rem;
}

.ml-4 {
  margin-left: 2rem;
}

.w-10 {
  width: 10% !important;
}

.w-13 {
  width: 13% !important;
}

.w-30 {
  width: 30% !important;
}
.w-35 {
  width: 35% !important;
}

.footer-bottom {
  width: 100%;
  right: 0;
  bottom: 0;
  left: 0;  
}

.cursor-pointer {
  cursor: pointer;
}

.button-primary {
  background-color: #005E7A !important;
  border-color: white;
  width: 94px;
}

.button-primary:hover {
  color: var(--bs-btn-hover-color);
  background-color: #005E7A !important;
  border-color: var(--bs-btn-hover-border-color);
}

.font-weight-600 {
  font-weight: 600 !important;
}

.table > :not(caption) > * > * {
  padding: 0.4rem 0.4rem !important;
}

nav {
  width: 100%;
  height: 80px;
  background-color: #005E7A;
  background-image: url('/assets/images/bg-topo-principal.png');
  background-repeat: no-repeat;
  background-attachment: scroll;
  background-position: right top;
  padding: 8px 16px 8px 16px;
}

.altura-home {
  min-height:calc(90vh - 37px);
}
</file>

<file path="tsconfig.app.json">
{
  "extends": "./tsconfig.json",
  "compilerOptions": {
    "outDir": "./out-tsc/app",
    "types": [
      "@angular/localize",
      "google.maps"
    ]
  },
  "files": [
    "src/main.ts"
  ],
  "include": [
    "src/**/*.d.ts"
  ]
}
</file>

<file path="tsconfig.json">
/* To learn more about this file see: https://angular.io/config/tsconfig. */
{
  "compileOnSave": false,
  "compilerOptions": {
    "baseUrl": "./",
    "outDir": "./dist/out-tsc",
    "forceConsistentCasingInFileNames": true,
    "strict": false,
    "noImplicitOverride": true,
    "noPropertyAccessFromIndexSignature": true,
    "noImplicitReturns": true,
    "noFallthroughCasesInSwitch": true,
    "sourceMap": true,
    "declaration": false,
    "downlevelIteration": true,
    "experimentalDecorators": true,
    "moduleResolution": "node",
    "importHelpers": true,
    "target": "ES2022",
    "module": "ES2022",
    "useDefineForClassFields": false,
    "lib": [
      "ES2022",
      "dom"
    ]
  },
  "angularCompilerOptions": {
    "enableI18nLegacyMessageIdFormat": false,
    "strictInjectionParameters": true,
    "strictInputAccessModifiers": true,
    "strictTemplates": true
  }
}
</file>

<file path="tsconfig.spec.json">
/* To learn more about this file see: https://angular.io/config/tsconfig. */
{
  "extends": "./tsconfig.json",
  "compilerOptions": {
    "outDir": "./out-tsc/spec",
    "types": [
      "jasmine",
      "@angular/localize"
    ]
  },
  "include": [
    "src/**/*.spec.ts",
    "src/**/*.d.ts"
  ]
}
</file>

</files>
